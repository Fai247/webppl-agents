// test agents on simple MDPs and POMDPs

var getLocations = function(trajectory){
  if (_.has(trajectory[0],'manifestState')){
    return map(function(state){return state.manifestState.loc;}, trajectory);
  }
  return map(function(state){return state.loc;}, trajectory)
};

var advanceStateTime = function(state){
  var newTimeLeft = state.timeLeft - 1;
  return update(state, { 
    timeLeft: newTimeLeft,
    terminateAfterAction: newTimeLeft > 1 ? state.terminateAfterAction : true
  });
};



var testMDPAgents = function(){
  var makeLineMDP = function(totalTime){

    var stateToActions = function(state){return [-1, 0, 1];};

    var transition = function(state,action){
      var newLoc = state.loc + action;
      var stateNewLoc = update(state,{loc: newLoc});
      return advanceStateTime(stateNewLoc);
    };

    var world = {stateToActions:stateToActions, transition:transition};
    
    var startState = {timeLeft: totalTime, 
                      terminateAfterAction: false, 
                      loc: 0};

    var utility = function(state, action){    
      var table = {0:1, 3:2};
      return table[state.loc] ? table[state.loc] : 0;
    };

    return {world:world, startState:startState, utility:utility};
  };


  // Make world
  var line = makeLineMDP(6);
  var world = line.world;
  var utility = line.utility;


  // MDPAgent
  var params = {alpha:1000, utility:utility};
  var agent = makeMDPAgent(params, world);
  var trajectory = simulateMDP(line.startState, world, agent, 'states');
  var locations = getLocations(trajectory);
  assert.ok( last(locations)==3, 'MDPAgent test');

  // random MDPAgent
  var makeMDPAgentRandom = function(params, world){
    var stateToActions = world.stateToActions;
    var act = function(state){
      return Infer({ method: 'enumerate' }, function(){return uniformDraw(stateToActions(state));})
    };
    return {act:act, params:params};
  };
  var agent = makeMDPAgentRandom(params, world);
  var trajectory = simulateMDP(line.startState, world, agent, 'states');
  var locations = getLocations(trajectory);
  

  // MDPAgentHyperbolic
  var params = {alpha:1000,
                utility:utility,
                discount:2,
                sophisticatedOrNaive: 'naive'};
  var agent = makeMDPAgent(params, world);
  var trajectory = simulateMDP(line.startState, world, agent, 'states');
  var locations = getLocations(trajectory);
  assert.ok( last(locations)==0, 'MDPAgentHyperbolic test');
  
};




var makeLinePOMDP = function(totalTime, treasureAt3){

  var beliefToActions = function(belief){return [-1, 0, 1];};
  
  var transition = function(state, action){
    var newLoc = state.loc + action;
    var stateNewLoc = update(state,{loc: newLoc});
    return advanceStateTime(stateNewLoc);
  };
  
  var observe = function(state){
    if (state.loc == 3){
      return state.treasureAt3 ? 'treasure' : 'no treasure';
    }
    return 'noObservation';
  };

  var world = {beliefToActions:beliefToActions, transition:transition, observe:observe};
    
  var startState = {timeLeft: totalTime, 
                    terminateAfterAction: false, 
                    loc: 0,
                    treasureAt3: treasureAt3};
  
  var utility = function(state, action){    
    if (state.loc==3 && state.treasureAt3){return 5;}
    if (state.loc==0){return 1;}
    return 0;
  };

  return {world:world, startState:startState, utility:utility};
};


var makeLinePOMDPManifest = function(totalTime, treasureAt3){
  var manifestStateToActions = function(manifestState){return [-1, 0, 1];};
  
  var transition = function(state, action){
    var newLoc = state.manifestState.loc + action;
    var manifestStateNewLoc = update(state.manifestState,{loc: newLoc});
    var newManifestState = advanceStateTime(manifestStateNewLoc);
    return {manifestState: newManifestState, latentState: state.latentState};
  };
  
  var observe = function(state){
    if (state.manifestState.loc == 3){
      return state.latentState.treasureAt3 ? 'treasure' : 'no treasure';
    }
    return 'noObservation';
  };

  var world = {manifestStateToActions:manifestStateToActions, transition:transition, observe:observe};
    
  var startState = {manifestState: {timeLeft: totalTime, 
                                    terminateAfterAction: false, 
                                    loc: 0},
                    latentState: {treasureAt3: treasureAt3}
                   };
                    
  var utility = function(state, action){    
    if (state.manifestState.loc==3 && state.latentState.treasureAt3){return 5;}
    if (state.manifestState.loc==0){return 1;}
    return 0;
  };

  return {world:world, startState:startState, utility:utility};
};




var testPOMDPAgentOptimal = function(){

  var getAlternateStartState = function(trueStartState, useManifestLatent){
    var newLatentState =  {latentState: {treasureAt3: true}};
    return useManifestLatent ? update(trueStartState, newLatentState) :
      update(trueStartState, {treasureAt3: true})
  };
  
  
  // RUN OPTIMAL AGENT (without manifestLatent state representation)
  var runAgent = function(totalTime, delayAgent, useManifestLatent){
    var treasureAt3 = false;
    var line = useManifestLatent ? makeLinePOMDPManifest(totalTime, treasureAt3) : 
        makeLinePOMDP(totalTime, treasureAt3);
    var world = line.world;
    var utility = line.utility;
    var trueStartState = line.startState;

    // POMDP agent (optimal)
    var alternateStartState = getAlternateStartState(trueStartState, useManifestLatent);

    var agentPriorBelief = Categorical({ ps:  [.5, .5],
                                         vs: [trueStartState, alternateStartState] });
    var params = {alpha:1000,              
                  utility:utility, 
                  priorBelief: agentPriorBelief           
                 };

    var params = delayAgent ? update(params,{optimal:false}) : update(params,{optimal:true});

    var agent = makePOMDPAgent(params, world);
  
    var trajectory = simulatePOMDP(trueStartState, world, agent, 'states');
    return getLocations(trajectory);
  };

  // test the pure POMDP agent vs. POMDP agent with delays (although delays play no role here)n
  map( function(delayAgent){
    var locations = runAgent(4, delayAgent);
    assert.ok(last(locations)==0, 'test POMDP line');
    var locations = runAgent(5, delayAgent);
    assert.ok(locations[3]==3, 'test POMDP line');
    var locations = runAgent(7, delayAgent);
    assert.ok(last(locations)==0, 'test POMDP line');
  }, [true, false] );


  // Speed and correctness test for *manifestLatent* optimization
  var compareAgent = function(totalTime, useManifestLatent){
    var treasureAt3 = false;
    var line = useManifestLatent ? makeLinePOMDPManifest(totalTime, treasureAt3) : 
        makeLinePOMDP(totalTime, treasureAt3);
    var world = line.world;
    var utility = line.utility;
    var trueStartState = line.startState;
    
    var agentPriorBeliefManifest = Infer({ method: 'enumerate' },  function(){
      var latentState = {treasureAt3: flip(),
                         dummy: uniformDraw(range(20))};
      return update(trueStartState, {latentState:latentState});
    });

    var agentPriorBelief = Infer({ method: 'enumerate' },  function(){
      return update(trueStartState,
                    {treasureAt3: flip(),
                     dummy: uniformDraw(range(20))});
    });

    var agentPriorBelief = useManifestLatent ? agentPriorBeliefManifest : agentPriorBelief;
        
    var params = {alpha:1000,              
                  utility:utility, 
                  priorBelief: agentPriorBelief           
                 };

    var agent =  makePOMDPAgent(params, world);
    var trajectory = simulatePOMDPAgent(trueStartState, world, agent, 'states');
    return getLocations(trajectory);
  };

  var out = map( function(useManifestLatent){
    return timeit(function(){
      return compareAgent(4, useManifestLatent);
    })
  }, [false, true]);

  assert.ok( _.isEqual( out[0].value, out[1].value), 'compare POMDP' );
  assert.ok(  out[0].runtimeInMilliseconds > out[1].runtimeInMilliseconds, 'compare POMDP' );
  console.log('Runtime in ms (simple, manifestLatent optimized) :',
              _.map( out, 'runtimeInMilliseconds' ) );                 
};




var testPOMDPAgentDelay = function(){

  // BOUNDED AGENTS
  var runAgent = function(paramsBase){
    var totalTime = 5;
    var treasureAt3 = false;
    var line = makeLinePOMDP(totalTime, treasureAt3);
    var world = line.world;
    var utility = line.utility;
    var trueStartState = line.startState;

    // Agent params
    var alternateStartState = update(trueStartState, {treasureAt3: true});
    var agentPriorBelief = Categorical({ ps:  [.5, .5],
                                         vs: [trueStartState, alternateStartState] });

    var params = update(paramsBase, {utility: utility, priorBelief: agentPriorBelief});
    var agent =  makePOMDPAgent(params, world);
    var trajectory = simulatePOMDP(trueStartState, world, agent, 'states');
    return getLocations(trajectory);
  };
  
  // Hyperbolic agent
  var paramsHyperbolic = {alpha:1000,              
                          noDelays: false,
                          discount: 2};
  
  var locations = runAgent(paramsHyperbolic);
  assert.ok(last(locations)==0, 'test POMDP line');

  var paramsRewardMyopia = update(paramsHyperbolic,
                                  {discount: 0, rewardMyopic:{bound:2} });
  var locations = runAgent(paramsRewardMyopia);
  assert.ok(last(locations)==0, 'test POMDP line');

  var paramsUpdateMyopic = update(paramsHyperbolic,
                              {discount: 0, updateMyopic:{bound:2} });
  var locations = runAgent(paramsUpdateMyopic);
  assert.ok(locations[3]==3, 'test POMDP line');
};




testMDPAgents();
testPOMDPAgentOptimal();
testPOMDPAgentDelay();


