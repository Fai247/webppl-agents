
var myInSupport = function(x, dist){return dist.score(x) > -100; };

var getActualSupport = function(dist) {
  assert.ok(hasSample(dist), 'tried to get the support of something other than an Dist');
  var hasNonNegligibleProbability = function(x) {
    return dist.score(x) > -100;
  };
  return filter(hasNonNegligibleProbability, dist.support());
};

var checkEqualDeltaDists = function(distArray) {
  assert.ok(hasSample(distArray[0]) && hasSample(distArray[1]),
	    'checkEqualDeltaDists applied to something other than an array of dists');
  var sample2 = function() {
    assert.ok(_.isEqual(sample(distArray[0]), sample(distArray[1])),
	      'dists not equal');
  };
  repeat(5, sample2);
};


var getPriorBelief = function(startManifestState, latentStateSampler){
  return Infer({ method: 'enumerate' },  function(){
    return {manifestState:startManifestState, 
            latentState: latentStateSampler()};
  });
};

var test1 = function() {

  // WORLD PARAMS
  var world = makeRestaurantChoiceWorld({POMDP:true});

  var perceivedTotalTime = 10;
  var startingLocation = [2,1];

  // Possible latent states
  var allOpenLatentState = {
    'Donut N': true, 'Donut S': true, 'Veg': true, 'Noodle': true
  };
  var onlyDonutSouthClosedLatentState = {
    'Donut N': true, 'Donut S': false, 'Veg': true, 'Noodle': true
  };

  var trueLatentState = allOpenLatentState;
  var startState = buildState({loc: startingLocation,
		               terminateAfterAction: false,
		               timeLeft: perceivedTotalTime,
		               timeAtRestaurant: 1},
	                      trueLatentState);


  // TRUE AGENT PARAMS
  // Params for true agent: agent thinks Donut South closed w/ prob .8


  // Possible utility functions (true agent has donutUtility)
  var donutUtilityTable = {'Donut N': 5,
			   'Donut S': 5,
			   'Veg': 1,
			   'Noodle': 1,
			   'timeCost': -0.1};
  
  var vegUtilityTable = {'Donut N': 1,
			 'Donut S': 1,
			 'Veg': 10,
			 'Noodle': 1,
			 'timeCost': -0.1};

  var uninformedLatentStateSampler = function(){
    return flip(.8) ? onlyDonutSouthClosedLatentState : trueLatentState;
  };
  
  var truePriorBelief = getPriorBelief( startState.manifestState, uninformedLatentStateSampler);


  var trueAgentParams = update(baseParamsNoDiscount, 
                               {priorBelief: truePriorBelief,
				utility: makeRestaurantUtilityFunction(world, donutUtilityTable)});



  // PRIOR FOR INFERENCE PARAMS

  var beliefOrBeliefDelay = 'belief';
  var makeAgent = getMakeAgentFunction(beliefOrBeliefDelay);
  
  var agentTypeAndFunctions = {type: beliefOrBeliefDelay, makeAgent:makeAgent, simulate: simulatePOMDP};

  var alternativePriorBelief = getPriorBelief( startState.manifestState, function(){return trueLatentState;});
  var priorUtilityTable = function(){return uniformDraw([donutUtilityTable, vegUtilityTable]);};
  var priorAgentPrior = function(){return uniformDraw([truePriorBelief, alternativePriorBelief]);};

  var prior = {priorUtilityTable: Infer({ method: 'enumerate' }, priorUtilityTable),
               priorAgentPrior: Infer({ method: 'enumerate' }, priorAgentPrior)};

  // INFERENCE
  
  var numRejectionSamples = 10;
  var dists = map( function(trajectoryOrOffPolicy){
    return inferGridWorldPOMDP(world, startState, baseParamsNoDiscount, trueAgentParams, prior, agentTypeAndFunctions,
                               trajectoryOrOffPolicy, numRejectionSamples);
  }, ['trajectory', 'offPolicy']);

  // TESTS FOR INFERENCE

  // support of trajectory should be contained in support of offPolicy (since
  // trajectory is rejection sampled and offPolicy is rejection sampled)
  // need to filter 'support' for things which actually have positive
  // probability
  // NB: this is generally applicable


  var dist0ActualSupport = getActualSupport(dists[0]);
  
  var dist1ActualSupport = getActualSupport(dists[1]);

  map(function(index){
    assert.ok( myInSupport(dist0ActualSupport[index], dists[1]),
  	       'support of trajectory Dist not contained in support of offPolicy Dist');
  }, _.range(dist0ActualSupport.length));


  // we expect both Dists to be delta Dists
  
  checkEqualDeltaDists(dists);

  assert.ok(sample(dists[1]).utilityTable['Donut S'] === 5,
	    'posterior Dist failed to infer agent liking donuts');

  var agentBelief = sample(dists[1]).priorBelief;
  var agentBeliefSample = sample(agentBelief);
  assert.ok(agentBelief.score(agentBeliefSample) < -0.1,
	    'posterior Dist failed to infer agents uncertainty');

  // other possible tests: look at MAP of dists[0] and dists[1], see if certain
  // things are more probable than other things in dists[1]

  console.log('passed first test');
};

var test2 = function() {
  // we see the agent go to donuts instead of noodles. this could be because they
  // like donuts, or it could be that the agent likes noodles but thinks that the
  // shop is closed: we can't tell. however, if we see the agent pass by the noodle
  // shop (and therefore learn that it is open), we will be able to infer whether
  // they like noodles, and if they do, this will imply that they initially
  // thought that the noodle shop was closed.

  // WORLD PARAMS
  var world = makeRestaurantChoiceWorld({POMDP:true});

  var perceivedTotalTime = 10;

  // possible latent states
  var noodleClosedLatent = {'Donut N': true,
			    'Donut S': true,
			    'Veg': true,
			    'Noodle': false};
  var everythingOpenLatent = {'Donut N': true,
			      'Donut S': true,
			      'Veg': true,
			      'Noodle': true};

  var trueLatentState = everythingOpenLatent;
  
  // start states
  var startState1 = {manifestState: {loc: [3,1],
				     terminateAfterAction: false,
				     timeLeft: 6,
				     timeAtRestaurant: 1},
		     latentState: trueLatentState};

  var startState2 = {manifestState: {loc: [5,4],
				     terminateAfterAction: false,
				     timeLeft: 10,
				     timeAtRestaurant: 1},
		     latentState: trueLatentState};

  // TRUE AGENT PARAMS
  
  // possible utility functions (agent has noodleUtilityTable)
  var donutUtilityTable = {'Donut N': 5,
			   'Donut S': 5,
			   'Veg': 1,
			   'Noodle': 1,
			   timeCost: -0.1};
  
  var noodleUtilityTable = {'Donut N': 2,
			    'Donut S': 2,
			    Veg: 1,
			    Noodle: 5,
			    timeCost: -0.1};

  // possible priors that the agent could have (actual prior is uninformed)
  var uninformedLatentStateSampler = function(){
    return flip(.8) ? noodleClosedLatent : trueLatentState;
  };

  var truePriorBelief1 = getPriorBelief( startState1.manifestState,
						  uninformedLatentStateSampler);


  var trueAgentParams1 = update(baseParamsNoDiscount, 
				{priorBelief: truePriorBelief1,
				 utility: makeRestaurantUtilityFunction(world,
								 noodleUtilityTable)});
  // PRIOR FOR INFERENCE PARAMS

  var beliefOrBeliefDelay = 'belief';
  var makeAgent = getMakeAgentFunction(beliefOrBeliefDelay);
  var agentTypeAndFunctions = {type: beliefOrBeliefDelay,
			       makeAgent:makeAgent,
			       simulate: simulatePOMDP};

  var alternativePriorBelief1 = getPriorBelief( startState1.manifestState,
							 function(){return trueLatentState;});
  var priorUtilityTable = function(){
    return uniformDraw([donutUtilityTable, noodleUtilityTable]);
  };
  var priorAgentPrior1 = function(){
    return uniformDraw([truePriorBelief1, alternativePriorBelief1]);
  };

  var prior1 = {priorUtilityTable: Infer({ method: 'enumerate' }, priorUtilityTable),
                priorAgentPrior: Infer({ method: 'enumerate' },  priorAgentPrior1)};

  // INFERENCE
  
  var numRejectionSamples = 20;

  var dists1 = map( function(trajectoryOrOffPolicy){
    return inferGridWorldPOMDP(world, startState1, baseParamsNoDiscount,
			       trueAgentParams1, prior1, agentTypeAndFunctions,
			       trajectoryOrOffPolicy, numRejectionSamples);
  }, ['trajectory', 'offPolicy']);

  // INFERENCE TESTS

  // support of trajectory should be contained in support of offPolicy (since
  // trajectory is rejection sampled and offPolicy is rejection sampled)
  // need to filter 'support' for things which actually have positive
  // probability
  // NB: this is generally applicable
  var dist10ActualSupport = getActualSupport(dists1[0]);
  
  var dist11ActualSupport = getActualSupport(dists1[1]);

  map(function(index){
    assert.ok( myInSupport(dist10ActualSupport[index], dists1[1]),
  	       'support of trajectory Dist not contained in support of offPolicy Dist');
  }, _.range(dist10ActualSupport.length));

  // inference should be unsure of whether the agent likes noodles

  assert.ok(Math.abs(dists1[1].score({utilityTable: noodleUtilityTable,
					 priorBelief: truePriorBelief1})
		     - dists1[1].score({utilityTable: donutUtilityTable,
					   priorBelief: truePriorBelief1})) < 0.5,
	    'inference improperly sure about whether agent likes noodles');

  assert.ok(Math.abs(dists1[1].score({utilityTable: noodleUtilityTable,
					 priorBelief: truePriorBelief1})
		     - dists1[1].score({utilityTable: donutUtilityTable,
					   priorBelief: alternativePriorBelief1})) < 0.5,
	    'inference improperly sure about whether agent likes noodles');
  
  // inference should think that if agent likes noodles, that agent thinks
  // noodles are closed, but if agent doesn't like noodles, then unsure about
  // agent's beliefs

  // console.log('posterior on agent params:');
  // printDist(dists1[1]);
  
  // console.log('true prior belief 1:');
  // printDist(truePriorBelief1);


  assert.ok(myInSupport({utilityTable: noodleUtilityTable,
			 priorBelief: truePriorBelief1}, dists1[1]),
	    'Enumeration incorrectly rules out true explanation');

  assert.ok(myInSupport({utilityTable: noodleUtilityTable,
			 priorBelief: truePriorBelief1}, dists1[0]),
	    'Rejection sampling incorrectly rules out true explanation');
  
  assert.ok(!myInSupport({utilityTable: noodleUtilityTable,
			  priorBelief: alternativePriorBelief1}, dists1[1]),
	    'incorrect inference that agent could like noodles and know latent state');

  console.log('passed second test part 1');
  
  // condition on second trajectory

  // update dists1[1] so that the agent knows the initial manifest state
  var jointPrior = Infer({ method: 'enumerate' }, function(){
    var jointSample = sample(dists1[1]);
    var utilityTable = jointSample.utilityTable;
    var agentPrior = jointSample.priorBelief;
    var latentStateSampler = function(){
      return sample(agentPrior).latentState;
    };
    var newAgentPrior = getPriorBelief(startState2.manifestState,
						latentStateSampler);
    return {utilityTable: utilityTable,
	    priorBelief: newAgentPrior};
  });

  var prior2 = {isJoint: true,
		jointPrior: jointPrior};

  var truePriorBelief2 = getPriorBelief( startState2.manifestState,
						  uninformedLatentStateSampler);


  var trueAgentParams2 = update(baseParamsNoDiscount, 
				{priorBelief: truePriorBelief2,
				 utility: makeRestaurantUtilityFunction(world,
								        noodleUtilityTable)});


  var dists2 = map( function(trajectoryOrOffPolicy){
    return inferGridWorldPOMDP(world, startState2, baseParamsNoDiscount,
  			       trueAgentParams2, prior2, agentTypeAndFunctions,
  			       trajectoryOrOffPolicy, numRejectionSamples);
  }, ['trajectory', 'offPolicy']);

  // check if inference functions are working as expected
  var dist20ActualSupport = getActualSupport(dists2[0]);
  
  var dist21ActualSupport = getActualSupport(dists2[1]);

  map(function(index){
    assert.ok( myInSupport(dist20ActualSupport[index], dists2[1]),
  	       'support of trajectory Dist not contained in support of offPolicy Dist');
  }, _.range(dist20ActualSupport.length));

  // Dists should be delta Dists (almost)

  checkEqualDeltaDists(dists2);
  
  // inference should think that agent likes noodles and thought noodles were closed

  assert.ok(sample(dists2[1]).utilityTable['Noodle'] === 5,
	    'posterior Dist failed to infer agent liking noodles');
  var agentBelief = sample(dists2[1]).priorBelief;
  var agentBeliefSample = sample(agentBelief);
  assert.ok(agentBelief.score(agentBeliefSample) < -0.1,
	    'posterior Dist failed to infer agents uncertainty');

  // true params should be in support of both dists -- this test fails because
  // the true agent prior dist has its possiblities listed in the wrong order.
  // I don't think that there would have been a problem had I not modified the
  // Dist in the *jointPrior* code block at line 279.
  // I judged that fixing this would be more trouble than it was worth, although
  // it should be done eventually.
  
  // assert.ok(myInSupport({utilityTable: noodleUtilityTable,
  // 			 priorBelief: truePriorBelief2}, dists2[1]),
  // 	    'Enumeration incorrectly rules out true explanation');

  // assert.ok(myInSupport({utilityTable: noodleUtilityTable,
  // 			 priorBelief: truePriorBelief1}, dists2[0]),
  // 	    'Rejection sampling incorrectly rules out true explanation');

  console.log('passed second test part 2');
};

var test3 = function() {
  // here, we see the agent go the long way around to veg. we deduce that they
  // must prefer noodle to veg, and think that noodle is open, despite noodle
  // actually being closed (as otherwise they would just go the short way
  // around)

  // WORLD PARAMS
  var world = makeRestaurantChoiceWorld({POMDP:true});


  // possible latent states
  var noodleClosedLatent = {'Donut N': true,
			    'Donut S': true,
			    'Veg': true,
			    'Noodle': false};
  var everythingOpenLatent = {'Donut N': true,
			      'Donut S': true,
			      'Veg': true,
			      'Noodle': true};

  var trueLatentState = noodleClosedLatent;
  
  // start states
  var startState = {manifestState: {loc: [3,1],
				    terminateAfterAction: false,
				    timeLeft: 10,
				    timeAtRestaurant: 1},
		    latentState: trueLatentState};

  // TRUE AGENT PARAMS
  
  // possible utility functions (agent has noodleUtilityTable)
  var noodleUtilityTable = {'Donut N': 1,
			    'Donut S': 1,
			    Veg: 1,
			    Noodle: 3,
			    timeCost: -0.1};

  var vegUtilityTable = {'Donut N': 1,
			 'Donut S': 1,
			 Veg: 3,
			 Noodle: 1,
			 timeCost: -0.1};

  // possible priors that the agent could have (actual prior is uninformed)
  var uninformedLatentStateSampler = function(){
    return flip(.8) ? everythingOpenLatent : trueLatentState;
  };

  var truePriorBelief = getPriorBelief( startState.manifestState,
						 uninformedLatentStateSampler);


  var trueAgentParams = update(baseParamsNoDiscount, 
			       {priorBelief: truePriorBelief,
				utility: makeRestaurantUtilityFunction(world,
								noodleUtilityTable)});
  // PRIOR FOR INFERENCE PARAMS

  var beliefOrBeliefDelay = 'belief';
  var makeAgent = getMakeAgentFunction(beliefOrBeliefDelay);
  var agentTypeAndFunctions = {type: beliefOrBeliefDelay,
			       makeAgent:makeAgent,
			       simulate: simulatePOMDP};

  var alternativePriorBelief = getPriorBelief( startState.manifestState,
							function(){return trueLatentState;});

  var priorUtilityTable = function(){
    return uniformDraw([vegUtilityTable, noodleUtilityTable]);
  };
  var priorAgentPrior = function(){
    return uniformDraw([truePriorBelief, alternativePriorBelief]);
  };

  var prior = {priorUtilityTable: Infer({ method: 'enumerate' }, priorUtilityTable),
               priorAgentPrior: Infer({ method: 'enumerate' },  priorAgentPrior)};

  // INFERENCE
  
  var numRejectionSamples = 20;

  var dists = map( function(trajectoryOrOffPolicy){
    return inferGridWorldPOMDP(world, startState, baseParamsNoDiscount,
			       trueAgentParams, prior, agentTypeAndFunctions,
			       trajectoryOrOffPolicy, numRejectionSamples);
  }, ['trajectory', 'offPolicy']);

  // INFERENCE TESTS

  // support of trajectory should be contained in support of offPolicy (since
  // trajectory is rejection sampled and offPolicy is rejection sampled)
  // need to filter 'support' for things which actually have positive
  // probability
  // NB: this is generally applicable
  var dist0ActualSupport = getActualSupport(dists[0]);
  
  var dist1ActualSupport = getActualSupport(dists[1]);

  map(function(index){
    assert.ok( myInSupport(dist0ActualSupport[index], dists[1]),
  	       'support of trajectory Dist not contained in support of offPolicy Dist');
  }, _.range(dist0ActualSupport.length));

  // Dists should be delta Dists (almost)

  checkEqualDeltaDists(dists);
  
  // inference should think that agent likes noodles and thought noodles were closed

  assert.ok(sample(dists[1]).utilityTable['Noodle'] === 3,
	    'posterior Dist failed to infer agent liking noodles');
  var agentBelief = sample(dists[1]).priorBelief;
  var agentBeliefSample = sample(agentBelief);
  assert.ok(agentBelief.score(agentBeliefSample) < -0.1,
	    'posterior Dist failed to infer agents uncertainty');

  // true params should be in support of both dists
  
  assert.ok(myInSupport({utilityTable: noodleUtilityTable,
  			 priorBelief: truePriorBelief}, dists[1]),
  	    'Enumeration incorrectly rules out true explanation');

  assert.ok(myInSupport({utilityTable: noodleUtilityTable,
  			 priorBelief: truePriorBelief}, dists[0]),
  	    'Rejection sampling incorrectly rules out true explanation');

  console.log('passed third test');
};


test1();
test2();
test3();
