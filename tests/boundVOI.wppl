var testBoundVOI = function(){
  console.log('\n Start test BoundVOI');
  
  // Three paths:
  // There are three paths from 'start', each of length 2.
  // 1. *immediate*: Immediate payoff (which is low).
  // 2. *certain*: Delayed payoff 2nd step (no prior uncertainty). Better than 1. 
  // 3. *eitherAorB*: Payoff that is delayed and depends on choosing between A and B, based
  // on observation at previous timestep. Highest payoff

  // When boundVOI==1, agent will not take superior *eitherAorB* option. 
  
  
  var makeThreePathsWorldAndStart = function(perceivedTime, noisyObserve){
    var transitionTable = {
      start: { immediate0: 'immediate0',
               certain0: 'certain0',
               eitherAorB_0: 'eitherAorB_0' },
      
      immediate0: { immediate1: 'immediate1'},
      
      certain0: {certain1: 'certain1'},
      
      eitherAorB_0: { eitherAorB_A: 'eitherAorB_A', 
                      eitherAorB_B: 'eitherAorB_B'}, 
      
      immediate1: {start: 'start'},
      certain1: {start: 'start'},
      eitherAorB_A: {start: 'start'},
      eitherAorB_B: {start: 'start'}
    };
    
    var transition = function(state, action){
      var newTimeLeft = state.manifestState.timeLeft - 1;
      var terminateAfterAction = (newTimeLeft ==1);
      var newLoc = action;
      assert.ok(newLoc === transitionTable[state.manifestState.loc][action], 'transition' );
      
      var newManifestState = {loc:newLoc, timeLeft:newTimeLeft, terminateAfterAction:terminateAfterAction };
      return buildState(newManifestState, state.latentState);
    };

    var manifestStateToActions = function(manifestState){
      return _.keys( transitionTable[manifestState.loc]);
    };
    
    var observe = function(state){
      if (state.manifestState.loc=='eitherAorB_0'){return state.latentState;}
      else {return 'noObservation';}
    };
    
    var world = {manifestStateToActions: manifestStateToActions, transition:transition, observe:observe};
    var start = buildState({timeLeft:perceivedTime, loc:'start', terminateAfterAction:false}, 'gotoA');
    return {world:world, startState:start, transitionTable:transitionTable};
  };
  
  
  var makeThreePathsAgent = function(utilityTable, baseAgentParams, worldAndStart){
    var transitionTable = worldAndStart.transitionTable;
    
    var utility = function(state,action){
      var loc = state.manifestState.loc;
      if ((loc=='eitherAorB_A' && state.latentState=='gotoA') || 
          (loc=='eitherAorB_B' && state.latentState=='gotoB') ){
        return utilityTable['eitherAorBPrize'];}
      if (loc == 'immediate0'){return utilityTable['immediatePrize'];}
      if (loc == 'certain1'){return utilityTable['certainPrize'];}
      return 0;
    };

    map( function(loc){
      var state = {manifestState:{loc:loc}};
      assert.ok( _.isFinite(utility(state,'blah')), 'bad utility');
    }, _.keys(transitionTable) );
    
    return makeBeliefDelayAgent(update(baseAgentParams,{utility:utility}), worldAndStart.world);
  };

                             
  var runThreePaths = function( totalTime, utilityTable, paramsUpdate ){

    var worldAndStart = makeThreePathsWorldAndStart(totalTime);

    var priorBelief = Enumerate( function(){
      var latentState = flip() ? 'gotoA' : 'gotoB';
      return buildState( worldAndStart.startState.manifestState, latentState);
    });
      
    var baseAgentParams = {
      alpha: 101,
      noDelays: false,
      discount: 0.1,
      sophisticatedOrNaive: 'naive',
      myopia: {on:false, bound:0},
      priorBelief: priorBelief,
      boundVOI: {on:false, bound:0}
    };
    
    var params = update(baseAgentParams, paramsUpdate);
    var agent = makeThreePathsAgent(utilityTable, params, worldAndStart);
    return simulateBeliefDelayAgent(worldAndStart.startState, worldAndStart.world, agent, 'states');
  };

  // TESTS

  // NB: agent will get obseration 'gotoA' in "eitherAorB_0" and so
  // will know that A is best.
  
  // Best prize is from "eitherAorB" branch
  var utilityTable = {eitherAorBPrize: 10, immediatePrize: 6, certainPrize: 9};  
  var totalTime = 3;

  
  // low discount agent
  var paramsUpdate = {discount: 0.1};
  var out = trajectoryToLocations( runThreePaths( totalTime, utilityTable, paramsUpdate ) );
  assert.ok( arraysEqual( out, [ 'start', 'eitherAorB_0', 'eitherAorB_A' ]), 'test boundVOI 1');

  // high discount agent
  var paramsUpdate = {discount: 4};
  var out = trajectoryToLocations( runThreePaths( totalTime, utilityTable, paramsUpdate ) );
  assert.ok( arraysEqual( out, [ 'start', 'immediate0', 'immediate1' ]), 'test boundVOI 2');

  // myopic agent
  var paramsUpdate = {discount:0, myopia: {on:true, bound:1} };
  var out = trajectoryToLocations( runThreePaths( totalTime, utilityTable, paramsUpdate ) );
  assert.ok( arraysEqual( out, [ 'start', 'immediate0', 'immediate1' ]), 'test boundVOI 3');

  var paramsUpdate = {discount:0, myopia: {on:true, bound:2} };
  var out = trajectoryToLocations( runThreePaths( totalTime, utilityTable, paramsUpdate ) );
  assert.ok( arraysEqual( out, [ 'start', 'eitherAorB_0', 'eitherAorB_A' ]), 'test boundVOI 3');

  
  // boundVOI agent
  var paramsUpdate = {discount:0, boundVOI:{on:true, bound:0} };
  var out = trajectoryToLocations( runThreePaths( totalTime, utilityTable, paramsUpdate ) );
  assert.ok( arraysEqual( out, [ 'start', 'certain0', 'certain1' ]), 'test boundVOI 4');

  var paramsUpdate = {discount:0, boundVOI:{on:true, bound:1} };
  var out = trajectoryToLocations( runThreePaths( totalTime, utilityTable, paramsUpdate ) );
  assert.ok( arraysEqual( out, [ 'start', 'eitherAorB_0', 'eitherAorB_A' ]), 'test boundVOI 4');

  
  console.log('\n Passed all boundVOI tests');
};

testBoundVOI();
