var printOut = function ( trajectory ) {
  console.log('trajectory', map( function (state) {return state.manifestState.loc;},
				 trajectory) );
  //console.log('expUtilities', out.startEU);
};

// testing deterministc bandits for *beliefAgent*. Basically the same as the
// tests for *beliefDelayAgent* on the pomdpBanditTests branch, but without the
// ones that display behaviour caused by discounting.
var testBandits = function () {
  // Agent thinks 0 is likely better. It is better and so agent stays
  var numArms = 2;
  var armToRewards = {'start':0, rewards: [10, 5]};
  var totalTime = 3;
  var priorBelief = Enumerate(function(){
    var latent =  flip(.8) ? armToRewards : update(armToRewards,
						   {rewards: [10, 15]});
    return buildDeterministicBanditStartState(totalTime, latent);
  });
  var trajectory = runBeliefAgentBandit(numArms, armToRewards, priorBelief,
			      totalTime);
  // console.log(printOut(trajectory));
  map( function(index){assert.ok( trajectory[index].manifestState.loc == 0,
				  'test1');}, [1,2] );


  // Agent thinks 0 is likely better, but tries 1 for the VOI.
  // 1 is worse, so it goes back to 0.

  var totalTime2 = 5;
  var priorBelief2 = Enumerate(function(){
    var latent =  flip(.6) ? armToRewards : update(armToRewards,
						   {rewards: [10, 15]});
    return buildDeterministicBanditStartState(totalTime2, latent);
  });
  var trajectory2 = runBeliefAgentBandit(numArms, armToRewards, priorBelief2,
			       totalTime2);
  assert.ok(trajectory2[1].manifestState.loc == 1);
  map( function(index){assert.ok( trajectory2[index].manifestState.loc == 0,
				  'test2');},
       [2,3] );

  // Same as above, but 1 is actually better
  var armToRewards3 = {'start': 0, rewards: [10, 15]};
  var trajectory3 = runBeliefAgentBandit(numArms, armToRewards3, priorBelief2,
			       totalTime2);
  map( function(index){assert.ok( trajectory3[index].manifestState.loc == 1,
				  'test3');},
       [1,2,3] );

  // three arms. Explore 1, then 2, then stick with 0.
  var numArms4 = 3;
  var armToRewards4 = {'start': 0, rewards: [1,0,0]};
  var priorBelief4 = Enumerate(function(){
    var latent = {
      'start': 0,
      rewards: [1, categorical([0.8, 0.2], [0, 200]), categorical([0.8, 0.2],
								  [0, 150])]
    };
    return buildDeterministicBanditStartState(totalTime2, latent);
  });
  var trajectory4 = runBeliefAgentBandit(numArms4, armToRewards4, priorBelief4,
			       totalTime2);
  // console.log(printOut(trajectory4));
  assert.ok( arraysEqual([1, 2, 0],
			 map(function(index){
			   return trajectory4[index].manifestState.loc;},
			     [1,2,3])),
	     'test4');

  // three arms, explore 1, then stick with 2.
  var armToRewards5 = {'start': 0, rewards: [1,0,150]};
  var trajectory5 = runBeliefAgentBandit(numArms4, armToRewards5, priorBelief4,
			       totalTime2);
  assert.ok( arraysEqual([1,2,2],
			 map(function(index){
			   return trajectory5[index].manifestState.loc;},
			     [1,2,3])),
	     'test5');
  
  console.log('passed testbandits');  
};

testBandits();                                                       
