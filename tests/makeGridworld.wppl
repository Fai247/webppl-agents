
var tableToUtilityFunction = function(world, utilityTable) {

  var getFeatureName = function(state){
    var getFeature = world.feature;
    return isPOMDPWithManifestLatent(world) ? getFeature(state.manifestState).name :
      getFeature(state).name;
  };
  
  return function(state, action) {
    var name = getFeatureName(state);
    return name ? utilityTable[name] : utilityTable.timeCost;
  };
};


// simple grid with no named features

var testSimple = function(){
  var features = [[ '' ,  '' ],
	          [ '' , '#'] ];

  var options = {noReverse: false,
                 gridFeatures: features};
  var world = makeGridWorld(options).world;

  var utility = function(state,action){
    if (state.loc[0]==1 && state.loc[1]==1){
      return 1;
    } else {
      return 0;
    };
  };

  var startState = {loc:[0,0], terminateAfterAction: false, timeLeft: 4};
  var agent = makeMDPAgent({alpha:100, utility:utility}, world);
  var actions = simulateMDP(startState, world, agent, 'actions');
  assert.ok( actions[0]==='u' && actions[1]==='r' && actions[2]==='l');
};


  // simple grid with named feature
var testNamed = function(){
  
  var features = [[ '' ,  {name:'cafe'} ],
	          [ '' , '#'] ];

  var options = {noReverse: false,
                 gridFeatures: features,
                 totalTime: 4,
                 startingLocation: [0,0]};
  
  var gridWorld = makeGridWorld(options)
  var world = gridWorld.world;
  var makeUtility = gridWorld.makeUtility;

  // make utility and startState manually
  var utility = function(state,action){
    var feature = world.feature;
    var table = {cafe:1};
    var featureStateName = feature(state).name
    return featureStateName ? table[featureStateName] : 0;
  };
  
  var startState = {loc:options.startingLocation, 
                    terminateAfterAction: false,
                    timeLeft: options.totalTime};
  
  var agent = makeMDPAgent({alpha:100, utility:utility}, world);
  var actions = simulateMDP(startState, world, agent, 'actions');
  assert.ok( actions.length == 3 && actions[0]==='u' && actions[1]==='r' && actions[2]==='l');

  
  // utility and startState from gridworld constructor
  var utilityTable = {cafe: 1, timeCost:0};
  var utility = makeUtility(utilityTable);
  var startState = gridWorld.startState;

  var agent = makeMDPAgent({alpha:100, utility:utility}, world);
  var actions = simulateMDP(startState, world, agent, 'actions');
  assert.ok( actions.length == 3 && actions[0]==='u' && actions[1]==='r' && actions[2]==='l');  
};


var testStochastic = function(){
  var line = ['', '', '', ''];
  var features = [line, line];
  
  var options = {noReverse: false,
                 gridFeatures: features,
                 transitionNoiseProbability: .1};
  
  var world = makeGridWorld(options).world;
  
  // utility:
  // [0, 0, -1000, -1000],
  // [0, 0, 0, 10] 
  
  var utility = function(state,action){
    if (state.loc[0]>=2 && state.loc[1]==1){return -1000;};
    if (state.loc[0]==3 && state.loc[1]==0){return 10;};
    return 0;
  };

  var startState = {loc:[0,0], terminateAfterAction: false, timeLeft: 15};
  var agent = makeMDPAgent({alpha:100, utility:utility}, world);
  var actions = simulateMDP(startState, world, agent, 'actions');
  assert.ok( !( actions[0]==='r' && actions[1]==='r' && actions[2]==='r' ) );
};


var testHike = function(){
  
  var transitionNoiseProb = 0;
  var world = makeHike(transitionNoiseProb);
  var startState = {loc: [0,1],
		    timeLeft: 12,
		    terminateAfterAction: false};
  
  // parameters for agent
  var utilityTable = {East: 10, West: 1, Hill: -10, timeCost: -.1};
  var utility = makeHikeUtilityFunction(world, utilityTable);
  var agent = makeMDPAgent({utility: utility, alpha: 1000}, world);
  var actions = simulateMDP(startState, world, agent, 'actions');
  assert.ok( actions[0]==='r' && actions[1]==='r' && actions[2]==='r' );
};

var testPOMDP = function(){
  var features = [[ '' ,  {name:'cafe'} ],
	          [ '' , '#'],
                  ['', {name: 'pub'}]];

  var options = {noReverse: false,
                 gridFeatures: features,
                 totalTime: 8,
                 startingLocation: [0,0]};
  
  var world = makeGridworldPOMDP(options)
  

  var utilityTable = {cafe:10, pub:5, timeCost:-.01};
  var utility = tableToUtilityFunction(world, utilityTable);
  
  var startState = {
    manifestState: {loc: [0,0],
                    terminateAfterAction: false,
                    timeLeft: options.totalTime},
                    
    latentState: {cafe: false, pub:true}
  };

  var priorBelief = deltaERP(startState);
  
  var params = {priorBelief: priorBelief,
                utility: utility};
  
  var agent = makeBeliefAgent(params, world);
  var actions = simulateBeliefAgent(startState, world, agent, 'actions');
  assert.ok( actions.length == 2 && actions[0]==='r');

  
  // Agent is uncertain
  var alternateStartState = update(startState, 
                                   {latentState: {cafe:true, pub:true}});
  var priorBelief = categoricalERP( [.5, .5], 
                                    [startState, alternateStartState]);
                                               
  var params = {priorBelief: priorBelief,
                utility: utility};
  
  var agent = makeBeliefAgent(params, world);
  var actions = simulateBeliefAgent(startState, world, agent, 'actions');

  assert.ok( actions.length == 6 && actions[0]==='u' && actions[1]==='u' &&
             actions[2]==='d');
   
}; 


var tests = [testSimple(), testNamed(), testStochastic(), testHike(), testPOMDP()];
console.log('passed all tests in makeGridworld.wppl')










