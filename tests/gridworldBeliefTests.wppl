

// WORLD PARAMS
var world = getBigDonutWorld();
var feature = world.feature;
var perceivedTotalTime = 10;
var startingLocation = [2,1];

// Possible latent states
var allOpenLatentState = {
  'Donut N': true, 'Donut S': true, 'Veg': true, 'Noodle': true
};
var onlyDonutSouthClosedLatentState = {
  'Donut N': true, 'Donut S': false, 'Veg': true, 'Noodle': true
};

var trueLatentState = allOpenLatentState;
var startState = buildState({loc: startingLocation,
		             terminateAfterAction: false,
		             timeLeft: perceivedTotalTime,
		             timeAtRestaurant: 1},
	                    trueLatentState);


// TRUE AGENT PARAMS
// Params for true agent: agent thinks Donut South closed w/ prob .8


// Possible utility functions (true agent has donutUtility)
var donutUtilityTable = {'Donut N': 5,
			 'Donut S': 5,
			 'Veg': 1,
			 'Noodle': 1,
			 'timeCost': -0.1};
 
var vegUtilityTable = {'Donut N': 1,
		       'Donut S': 1,
		       'Veg': 3,
		       'Noodle': 1,
		       'timeCost': -0.1};

var uninformedLatentStateSampler = function(){
  return flip(.8) ? onlyDonutSouthClosedLatentState : trueLatentState;
};

var truePriorBelief = getPriorBeliefGridworld( startState.manifestState, uninformedLatentStateSampler);


var trueAgentParams = update(baseParamsNoDiscount, 
                             {priorBelief: truePriorBelief,
                              utility: tableToUtilityFunction(donutUtilityTable, feature)});



// PRIOR FOR INFERENCE PARAMS

var alternativePriorBelief = getPriorBeliefGridworld( startState.manifestState, function(){return trueLatentState;});
var priorUtilityTable = function(){return uniformDraw([donutUtilityTable, vegUtilityTable]);};
var priorAgentPrior = function(){return uniformDraw([truePriorBelief, alternativePriorBelief]);};

var prior = {priorUtilityTable: Enumerate(priorUtilityTable),
             priorAgentPrior: Enumerate(priorAgentPrior)};


// Inference params
var numRejectionSamples = 10;

map( function(trajectoryOrOffPolicy){
  var erp = inferGridWorldPOMDP(world, startState, baseParamsNoDiscount, trueAgentParams, prior, trajectoryOrOffPolicy, 
                                numRejectionSamples, 'belief');
  console.log('\n\n Erp for ' + trajectoryOrOffPolicy);
  printERP(erp);
}, ['trajectory', 'offPolicy']);
ash();

