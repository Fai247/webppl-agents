// test agents on simple MDPs and POMDPs

var getLocations = function(trajectory){return map(function(state){return state.loc;}, trajectory)};

var advanceStateTime = function(state){
  var newTimeLeft = state.timeLeft - 1;
  return update(state, { 
    timeLeft: newTimeLeft,
    terminateAfterAction: newTimeLeft > 1 ? state.terminateAfterAction : true
  });
};


var makeLineMDP = function(totalTime){

  var stateToActions = function(state){return [-1, 0, 1];};

  var transition = function(state,action){
    var newLoc = state.loc + action;
    var stateNewLoc = update(state,{loc: newLoc});
    return advanceStateTime(stateNewLoc);
  };

  var world = {stateToActions:stateToActions, transition:transition};
  
  var startState = {timeLeft: totalTime, 
                    terminateAfterAction: false, 
                    loc: 0};

  var utility = function(state, action){    
    var table = {0:1, 3:2};
    return table[state.loc] ? table[state.loc] : 0;
  };

  return {world:world, startState:startState, utility:utility};
};


var lineMDP = makeLineMDP(6);
var world = lineMDP.world;
var utility = lineMDP.utility;

// MDPAgent
var params = {alpha:1000, utility:utility};
var agent = makeMDPAgent(params, world);
var trajectory = simulateMDP(lineMDP.startState, world, agent, 'states');
var locations = getLocations(trajectory);
console.log(locations, last(locations));
assert.ok( last(locations)==3, 'MDPAgent test');

// MDPAgentHyperbolic
var params = {alpha:1000,
              utility:utility,
              discount:2,
              sophisticatedOrNaive: 'naive'};
var agent = makeHyperbolicDiscounter(params, world);
var trajectory = simulateHyperbolic(lineMDP.startState, world, agent, 'states');
var locations = map(function(state){return state.loc;}, trajectory);
assert.ok( last(locations)==0, 'MDPAgentHyperbolic test');


