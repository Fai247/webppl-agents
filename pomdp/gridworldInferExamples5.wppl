// like gridworldInferExamples2, but with a prior with broader support, so we need MCMC

var gridworldMDP = makeDonutWorld2({big: true, noReverse : true});
var gridworldPOMDP = makeGridworldPOMDP(gridworldMDP);
var feature = gridworldMDP.feature;
var transition = gridworldPOMDP.transition;
var observe = gridworldPOMDP.observe;

var noodleUtilityTable = {'Donut N': 1,
			  'Donut S': 1,
			  'Veg': 0,
			  'Noodle': 2,
			  timeCost: -0.1};

var donutUtilityTable = { 'Donut N': 2, 'Donut S': 2, Veg: 1, Noodle: 0,
			  timeCost: -0.1 };

var tableToUtilityFunction = function(table) {
  return function(state, action) {
    var stateFeatureName = feature(state.manifestState).name;
    if (stateFeatureName) {
      return table[stateFeatureName];
    } else {
      return table.timeCost;
    }
  };
};

var makeUninformedPrior = function(p){
  return Enumerate(function(){
    if (flip(p)) {
      return {'Donut N': true,
	      'Donut S': true,
	      'Veg': true,
	      'Noodle': false};
    } else {
      return {'Donut N': true,
	      'Donut S': true,
	      'Veg': true,
	      'Noodle': true};
    }
  });
};

var informedPrior = deltaERP({'Donut N': true,
			      'Donut S': true,
			      'Veg': true,
			      'Noodle': true});

var startState = {manifestState: {loc: [3,0],
				  dead: false,
				  timeLeft: 3,
				  digest: 1},
		  latentState: {'Donut N': true,
				'Donut S': true,
				'Veg': true,
				'Noodle': true}};

var agent = makeBeliefAgent({utility: tableToUtilityFunction(noodleUtilityTable),
			     alpha: 100,
			     priorBelief: makeUninformedPrior(0.8)}, gridworldPOMDP);

var obsFunc = function(){return JSON.stringify(simulateBeliefAgent(startState,
gridworldPOMDP,
agent,
3, 'both'));};

console.log(timeit(obsFunc));
