// we see the agent go to a far-away donut shop. it must like donuts and think that
// the nearby donut shop is closed.

var gridworldMDP = makeDonutWorld2({big: true});
var gridworldPOMDP = makeGridworldPOMDP(gridworldMDP);
var feature = gridworldMDP.feature;
var transition = gridworldPOMDP.transition;
var observe = gridworldPOMDP.observe;

var donutUtilityTable = {'Donut N': 5,
			 'Donut S': 5,
			 'Veg': 1,
			 'Noodle': 1,
			 timeCost: -0.1};
 
var vegUtilityTable = {'Donut N': 1,
		       'Donut S': 1,
		       Veg: 3,
		       Noodle: 1,
		       timeCost: -0.1};

var tableToUtilityFunction = function(table) {
  return function(state, action) {
    var stateFeatureName = feature(state.manifestState).name;
    if (stateFeatureName) {
      return table[stateFeatureName];
    } else {
      return table.timeCost;
    }
  };
};

var uninformedPrior = Enumerate(function(){
  if (flip(0.8)) {
    return {'Donut N': true,
	    'Donut S': false,
	    'Veg': true,
	    'Noodle': true};
  } else {
    return {'Donut N': true,
	    'Donut S': true,
	    'Veg': true,
	    'Noodle': true};
  }
});

var informedPrior = deltaERP({'Donut N': true,
			      'Donut S': true,
			      'Veg': true,
			      'Noodle': true});

var startState = {manifestState: {loc: [3,1],
				  dead: false,
				  timeLeft: 10,
				  digest: 1},
		  latentState: {'Donut N': true,
				'Donut S': true,
				'Veg': true,
				'Noodle': true}};

var agent = makeBeliefAgent({utility: tableToUtilityFunction(donutUtilityTable),
			     alpha: 100,
			     priorBelief: uninformedPrior}, gridworldPOMDP);

var observedTrajectory = simulateBeliefAgent(startState, gridworldPOMDP, agent, 6,
					     'states');

var utilityTablePrior = Enumerate(function(){
  if (flip(0.5)) {
    return donutUtilityTable;
  } else {
    return vegUtilityTable;
  }
});

var beliefPrior = Enumerate(function(){
  if (flip(0.5)) {
    return uninformedPrior;
  } else {
    return informedPrior;
  }
});

var sampleAlongTrajectory = function(state, currentBelief, actionsSampled,
				     trajectory, agentActionBelief) {
  assert.ok(isERP(agentActionBelief(state.manifestState, currentBelief,
				    observe(state))),
	    'agentActionBelief not correct in sampleAlongTrajectory');
  
  if (actionsSampled === trajectory.length - 1) {
    return [];
  } else {
    var actionBeliefERP = agentActionBelief(state.manifestState, currentBelief,
					    observe(state));
    var nextStateERP = Enumerate(function(){
      return transition(state, sample(actionBeliefERP).action);
    });
    var newBelief = sample(actionBeliefERP).belief;

    var trajectoryNextState = trajectory[actionsSampled + 1];
    
    factor(nextStateERP.score([], trajectoryNextState));
    
    return sampleAlongTrajectory(trajectoryNextState, newBelief, actionsSampled + 1,
				 trajectory, agentActionBelief);
  }
};


// Slightly simpler version that uses [state,action] and *condition* rather than states,factor. 
var conditionOnSequence = function(currentBelief, index, observedStateAction, agentActionBelief){
  if (index >= observedStateAction.length){ 
    return []; // no-op
  } else {
    var state = observedStateAction[index][0];
    var observedAction = observedStateAction[index][1];
    var agentERP = agentActionBelief(state.manifestState, currentBelief, observe(state));
    
    condition( _.isEqual( sample(agentERP).action, observedAction ) );
    
    conditionOnSequence( sample(agentERP).belief, index + 1, observedStateAction, agentActionBelief);
  }
};
//var observedStateAction = simulateBeliefAgent(startState, gridworldPOMDP, agent, 6, 'both');
//conditionOnSequence(observedTrajectory[0], agentPrior, 0, observedStateAction, agentActionBelief)



var agentPosterior = Enumerate(function(){
  var utilityTable = sample(utilityTablePrior);
  var utility = tableToUtilityFunction(utilityTable);
  var agentPrior = sample(beliefPrior);
  var agent = makeBeliefAgent({utility: utility,
			       alpha: 100,
			       priorBelief: agentPrior},
			      gridworldPOMDP);
  var agentActionBelief = agent.agent;

  sampleAlongTrajectory(observedTrajectory[0], agentPrior, 0, observedTrajectory,
			agentActionBelief);
  
  return {utilityTable: utilityTable,
	  prior: agentPrior};
});

printERP(agentPosterior);
