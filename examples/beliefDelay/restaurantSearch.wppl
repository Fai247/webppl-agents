// optimal_agent_restaurant_search
var gridworld = makeRestaurantSearchMDP({noReverse: true});
var world = makeBanditGridworld(gridworld);
var feature = world.feature;
var startState = restaurantSearchStartState;

var agentPrior = Enumerate(function(){
  var rewardE = flip() ? 5 : 0;
  var latentState = {A: 3,
		             B: uniformDraw(range(6)),
		             C: uniformDraw(range(6)),
		             D: 5 - rewardE,
		             E: rewardE};
  return buildState(startState.manifestState, latentState);
});

var params = {
  utility: makeBanditGridworldUtility(feature, -0.01),
  alpha: 1000,
  priorBelief: agentPrior
};

var agent = makeBeliefAgent(params, world);

var trajectory = simulateBeliefAgent(startState, world, agent, 'states');

var manifestStates = map(function(state){return state.manifestState;},
                         trajectory);
print('Rewards for each restaurant: ' + JSON.stringify(startState.latentState));
GridWorld.draw(gridworld, {trajectory: manifestStates})
