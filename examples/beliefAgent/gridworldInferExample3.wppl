// here, we see the agent go the long way around to veg. we deduce that they
// must prefer noodle to veg, and think that noodle is open, despite noodle
// actually being closed (as otherwise they would just go the short way around)

var gridworldMDP = makeDonutWorld2({big: true});
var gridworldPOMDP = makeGridWorldPOMDP(gridworldMDP);
var feature = gridworldMDP.feature;
var transition = gridworldPOMDP.transition;
var observe = gridworldPOMDP.observe;

var noodleUtilityTable = {'Donut N': 1,
			  'Donut S': 1,
			  'Veg': 1,
			  'Noodle': 3,
			  timeCost: -0.1};

var vegUtilityTable = {'Donut N': 1,
		       'Donut S': 1,
		       Veg: 3,
		       Noodle: 1,
		       timeCost: -0.1};

var tableToUtilityFunction = function(table) {
  return function(state, action) {
    if (state.manifestState.terminateAfterAction) {
      return 0;
    }
    var stateFeatureName = feature(state.manifestState).name;
    if (stateFeatureName) {
      return table[stateFeatureName];
    } else {
      return table.timeCost;
    }
  };
};

var uninformedPrior = Infer({ method: 'enumerate' }, function(){
  if (flip(0.8)) {
    return {'Donut N': true,
	    'Donut S': true,
	    'Veg': true,
	    'Noodle': true};
  } else {
    return {'Donut N': true,
	    'Donut S': true,
	    'Veg': true,
	    'Noodle': false};
  }
});

var informedPrior = Delta({ v: {'Donut N': true,
			      'Donut S': true,
			      'Veg': true,
			      'Noodle': false} });

var startState = {manifestState: {loc: [3,1],
				  terminateAfterAction: false,
				  timeLeft: 10,
				  timeAtRestaurant: 1
				  },
		  latentState: {'Donut N': true,
				'Donut S': true,
				'Veg': true,
				'Noodle': false}};

var agent = makeBeliefAgent({utility: tableToUtilityFunction(noodleUtilityTable),
			     alpha: 100,
			     priorBelief: uninformedPrior}, gridworldPOMDP);

var observedTrajectory = simulateBeliefAgent(startState, gridworldPOMDP, agent, 6,
					     'stateAction');
// GridWorld.draw(gridworldMDP, {trajectory: observedTrajectory});
// TODO: labels

var factorOnSequence = function(currentBelief, index, observedStateAction, agent){
  if (index >= observedStateAction.length){ 
    return []; // no-op
  } else {
    var agentAct = agent.act;
    var agentUpdateBelief = agent.updateBelief;
    
    var state = observedStateAction[index][0];
    var observedAction = observedStateAction[index][1];

    var observation = observe(state);
    var nextBelief = agentUpdateBelief(state.manifestState, currentBelief, observation);
    var nextActionDist = agentAct(state.manifestState, nextBelief, 0);
    
    factor(nextActionDist.score(observedAction));
    
    return factorOnSequence(nextBelief, index + 1, observedStateAction, agent);
  }
};

var agentPosterior = function(){
  return printDist(Infer({ method: 'enumerate' }, function(){
    var utilityTable = uniformDraw([noodleUtilityTable, vegUtilityTable]);
    var utility = tableToUtilityFunction(utilityTable);
    var agentPrior = uniformDraw([informedPrior, uninformedPrior]);
    var agent = makeBeliefAgent({utility: utility,
				 alpha: 100,
				 priorBelief: agentPrior},
				gridworldPOMDP);

    factorOnSequence(agentPrior, 0, observedTrajectory,
		     agent);
    
    return {utilityTable: utilityTable,
	    prior: agentPrior};
  }));
};

timeit(agentPosterior);
