
// discounter_procrastinates

// procrastinates, because it thinks that it will do it later

var world = makeProcrastinationMDP2();

var utilityTable = {reward: 10,
		    waitCost: -0.1,
		    workCost: -1};
var utility = makeProcrastinationUtility2(utilityTable);

var startState = {loc: "wait_state",
		  waitSteps: 0,
		  timeLeft: 10,
		  terminateAfterAction: false};

var params = {utility: utility,
	      alpha: 100,
	      discount: 5,
	      sophisticatedOrNaive: 'naive'};
  
var agent = makeHyperbolicDiscounter(params, world);
var trajectory = simulateHyperbolic(startState, world, agent, 'stateAction');
map(function(stateAction){return [stateAction[0].loc, stateAction[1]];},
    trajectory);


// Construct Procrastinate Problem world 
var deadline = 10;
var world = makeProcrastinationMDP2(deadline);

// Agent's params
var utilityTable = {reward: 10,
		    waitCost: -0.1,
		    workCost: -1};

var params = {utility: makeProcrastinationUtility2(utilityTable),
	      alpha: 1000,
	      discount: null,
	      sophisticatedOrNaive: 'naive'};

var simulatePro = function(discount){
  var agent = makeHyperbolicDiscounter(update(params, {discount: discount}), world);
  var stateActions = simulateHyperbolic(world.startState, world, agent);
  var states = map(first,stateActions);
  return [last(states).loc, stateActions.length];
};

var discounts = range(11);
var lastActionsAndTimes = map(simulatePro, discounts);

console.log('\n\n Discounts: ' + discounts + '\nLast actions and lengths of trajectories:'
      + JSON.stringify(lastActionsAndTimes));
