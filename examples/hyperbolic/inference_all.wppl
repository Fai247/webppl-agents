
// Hyperbolic Inference example 1: Naive Trajectory
// -- Goes from bottom to Donut North
// Inference should infer that Donut has [high,low] utility
// and Veg the opposite.

var displayMarginals = function(erp, keys){
  map( function(key){
    console.log('\n Marginal for : ', key);
    printERP(getMarginal(erp, key) );
  }, keys);
};


var restaurantHyperbolic = function(){

  var getObservations = function(world, start, pathName){
    var temptationUtility = makeRestaurantUtilityMDP(world, {
      'Donut N' : [10, -10],
      'Donut S' : [10, -10],
      'Veg'   : [-10, 20],
      'Noodle': [-5, -5],
      'timeCost': -.01,
    });
    
    var discount = pathName=='vegDirect' ? 0 : 1;
    var sophisticatedOrNaive = pathName=='naive' ? 'naive' : 'sophisticated';
    
    var agent = makeHyperbolicDiscounter(
      { utility : temptationUtility,
        alpha : 500, 
        discount : discount, 
        sophisticatedOrNaive  : sophisticatedOrNaive
      }, world);
    var observedStateAction = simulateHyperbolic(start, world, agent);
    var observedLocs = getLocationsHyperbolic(observedStateAction);   
    assert.ok( _.isEqual( observedLocs, restaurantNameToPath[pathName]), 'generated matches stored');
    return observedStateAction;
  };

  
  var factorSequence = function(agentAction, observedStateAction){
    map(function (stateAction) {
      var state   = stateAction[0];
      var action  = stateAction[1];
      factor(agentAction(state, 0).score([], action)) ; 
    }, observedStateAction);
  };

  var getPosterior = function(priorUtilityTable, priorDiscounting, priorAlpha, observedStateAction){
    return Enumerate(function () {
      var utilityTable = priorUtilityTable();
      var discounting = priorDiscounting();
      var alpha = priorAlpha();
      
      var agent = makeHyperbolicDiscounter(
        { utility   : makeRestaurantUtilityMDP(world, utilityTable),
          alpha     : alpha, 
          discount  : discounting.discount, 
          sophisticatedOrNaive : discounting.sophisticatedOrNaive,
        }, world);
      var agentAction = agent.act;
      
      factorSequence(agentAction, observedStateAction);

      var vegMinusDonut = sum(utilityTable['Veg']) - sum(utilityTable['Donut N']);
      return {utility: utilityTable, 
              discount: discounting.discount, 
              alpha: alpha,
              sophisticatedOrNaive: discounting.sophisticatedOrNaive,
              vegMinusDonut: vegMinusDonut
             };
    });
  };

  return {getObservations: getObservations, getPosterior: getPosterior};
};


var world = restaurantChoiceMDP;
var start = restaurantChoiceStart; // TODO starts at [3,1]. Why does the agent do weird things when starting at [3,0]?
var restaurantHyperbolic = restaurantHyperbolic();
var getObservations = restaurantHyperbolic.getObservations;
var getPosterior = restaurantHyperbolic.getPosterior;


// Quick examples
var quickExamples = function(){

  var priorAlpha = function(){return 500;};
  var priorAlpha = function(){return uniformDraw([1,100]);};


  var priorUtilityTable = function(){
    var c = 0;  // TODO why does this mess up when c=10?
    var getU = function(){return uniformDraw([-10,0,10,20]);};

    var donut = [getU()+c, getU()+c];
    var veg = [getU()+c, getU()+c];
    
    return {
      'Donut N' : donut,
      'Donut S' : donut,
      'Veg'     : veg,
      'Noodle'  : [-5+c, -5+c],
      'timeCost': -.01
    };
  };
  
  var priorDiscounting = function(){
    return {
      discount: uniformDraw([0,1]),
      sophisticatedOrNaive: uniformDraw(['sophisticated', 'naive'])
    };
  };

  // var observationName = 'naive';
  // var observedStateActionSequence = getObservations(world, start, observationName);
  // var posterior = getPosterior(priorUtilityTable, priorDiscounting, priorAlpha, observedStateActionSequence);
  // 
  
  var observationName = 'sophisticated';
  var observedStateActionSequence = getObservations(world, start, observationName);
  var posterior = getPosterior(priorUtilityTable, priorDiscounting, priorAlpha, observedStateActionSequence);
  printTopK(posterior,10);
  ash();
  
  var observationName = 'vegDirect';
  var observedStateActionSequence = getObservations(world, start, observationName);
  var posterior = getPosterior(priorUtilityTable, priorDiscounting, priorAlpha, observedStateActionSequence);
  
};
quickExamples();



// Naive params that yield temptation 
var priorAlpha = function(){return 3;};

// Single variable case
var priorUtilityTable = function(){
  var getU = function(){return uniformDraw( _.range(-4,20,1));}
  var donut = [10, 0]; // take MAP params for all but veg 2. 
  var veg = [10, getU()]; 
  
  return {
    'Donut N' : donut,
    'Donut S' : donut,
    'Veg'     : veg,
    'Noodle'  : [-5, -5],
    'timeCost': -.01
  };
};

// Two variable case
var priorUtilityTable2 = function(){
  var getU = function(){return uniformDraw( _.range(-4,20,2));}
  var donut = [getU(), 0]; // take MAP params for all but veg 2. 
  var veg = [10, getU()]; 
  
  return {
    'Donut N' : donut,
    'Donut S' : donut,
    'Veg'     : veg,
    'Noodle'  : [-5, -5],
    'timeCost': -.01
  };
};
var priorUtilityTable = priorUtilityTable2;

var priorDiscounting = function(){
  return { discount: 1, sophisticatedOrNaive: 'naive'};
};

var observationName = 'naive';
var observedStateActionSequence = getObservations(world, start, observationName);
var posterior = getPosterior(priorUtilityTable, priorDiscounting, priorAlpha, observedStateActionSequence);
var marginalVeg = Enumerate( function(){
  return sample(posterior).utility.Veg[1];
});
console.log('marginal veg');
printERP(marginalVeg);

displayMarginals(posterior, ['sophisticatedOrNaive', 'discount', 'vegOverDonut']);
printTopK(posterior,5);


// if (typeof(document) !== 'undefined') { viz.print(posterior); }
// else {printTopK(posterior,4);}

null
