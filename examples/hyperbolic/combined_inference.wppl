

// Condition on naive/soph/vegDirect with the same prior
// Prior includes utilities and discouting with a minimal number of parameters
// *discountingOn* allows for discount > 0
// *timeCostDonut* includes possibly +ve timeCost and different values for DonutS and donutN
var hyperbolicQuick = function(alphaValues, discountingOn, timeCostDonut){

  var world = makeDonutWorld2({big:true, noReverse:true, maxTimeAtRestaurant:2});
  var start = restaurantChoiceStart;
  
  var priorAlpha = function(){return uniformDraw(alphaValues);};

  var priorUtilityTable = function(){
    var c = 0;  // TODO why does this mess up when c=10?
    var getU = function(){return uniformDraw([-10,10,20]);};
    var donut = [getU()+c, getU()+c];
    var veg = [getU()+c, getU()+c];

    var donut2 = timeCostDonut ?
        [donut[0]+uniformDraw([-5,5]), donut[1]] : donut;
    var timeCost = timeCostDonut ? uniformDraw([-.01, .5]) : -.01;
    
    return {
      'Donut N' : donut,
      'Donut S' : donut2,
      'Veg'     : veg,
      'Noodle'  : [-5+c, -5+c],
      'timeCost': timeCost
    };
  };
  
  var priorDiscounting = function(){
    return {
      discount: uniformDraw([0,1]),
      sophisticatedOrNaive: uniformDraw(['sophisticated', 'naive']),
    };
  };

  var priorDiscounting = discountingOn ? priorDiscounting :
      function(){return {discount:0, sophisticatedOrNaive:'naive'};}

  var run = function(observationName){
    var observedStateActionSequence = getObservations(world, start, observationName);
    var posterior = getPosterior(world, priorUtilityTable, priorDiscounting, priorAlpha, 
                                 observedStateActionSequence);
    console.log(' \n\n', observationName, ' : '); 
    printTopK(posterior,4);
    displayMarginals(posterior,['alpha', 'discount', 'sophisticatedOrNaive', 'vegMinusDonut',
                               'donutNWins']);
  }
  run('naive'); 
  run('sophisticated');
  run('vegDirect');
};

var runHyperbolicQuick = function(){
  // TODO: with noReverse=true, with alpha=50, we don't infer naive/soph marginals correctly
  // (but this does work OK with alpha=500)
  var alphaValues = [.5, 10, 50, 500];
  var discountingOn = true;
  var timeCostDonut = false;
  hyperbolicQuick(alphaValues, discountingOn,timeCostDonut);

  // compare to model without discounting, which infers that alpha is small
  // (should not infer this for vegDirect). this seems to work. 
  var discountingOn = false;
  var timeCostDonut = false;
  //hyperbolicQuick(alphaValues, discountingOn,timeCostDonut);

  // Should learn DonutNWins for *naive*, timeCost=.5 for *sophisticated*
  // and neither for *vegDirect*
  var discountingOn = false
  var timeCostDonut = true;
  //hyperbolicQuick(alphaValues, discountingOn, timeCostDonut);
};


// Naive params that yield temptation 
// var priorAlpha = function(){return 3;};

// // Single variable case
// var priorUtilityTable = function(){
//   var getU = function(){return uniformDraw( _.range(-4,20,1));}
//   var donut = [10, 0]; // take MAP params for all but veg 2. 
//   var veg = [10, getU()]; 
  
//   return {
//     'Donut N' : donut,
//     'Donut S' : donut,
//     'Veg'     : veg,
//     'Noodle'  : [-5, -5],
//     'timeCost': -.01
//   };
// };

// // Two variable case
// var priorUtilityTable2 = function(){
//   var getU = function(){return uniformDraw( _.range(-4,20,2));}
//   var donut = [getU(), 0]; // take MAP params for all but veg 2. 
//   var veg = [10, getU()]; 
  
//   return {
//     'Donut N' : donut,
//     'Donut S' : donut,
//     'Veg'     : veg,
//     'Noodle'  : [-5, -5],
//     'timeCost': -.01
//   };
// };
// var priorUtilityTable = priorUtilityTable2;

// var priorDiscounting = function(){
//   return { discount: 1, sophisticatedOrNaive: 'naive'};
// };






var example1_inferType = function(){
  // Call to hyperbolic library function and helper display function
  ///fold:
  var restaurantHyperbolicInfer = getRestaurantHyperbolicInfer();
  var getPosterior = restaurantHyperbolicInfer.getPosterior;

  var displayResults = function(erp){
    print('MAP utility table: ' + JSON.stringify(erp.MAP().val.utility));
    viz.vegaPrint(getMarginalObject(erp,'vegMinusDonut'));
    viz.vegaPrint(getMarginalObject(erp,'sophisticatedOrNaive'));
    viz.vegaPrint(getMarginalObject(erp,'alpha'));
    print(JSON.stringify( getMarginalObject(erp,'alpha') ) )
  };
  ///
  
  // Prior on agent's utility function
  var priorUtilityTable = function(){
    var utilityValues =  [-10, 0, 10, 20, 30];
    var donut = [uniformDraw(utilityValues), uniformDraw(utilityValues)];
    var veg = [uniformDraw(utilityValues), uniformDraw(utilityValues)];
    return {
      'Donut N' : donut,
      'Donut S' : donut,
      'Veg'     : veg,
      'Noodle'  : [-10, -10],
      'timeCost': -.01
    };
  };

  var priorDiscounting = function(){ 
    return {
      discount: uniformDraw([0,1]),
      sophisticatedOrNaive: uniformDraw(['naive','sophisticated'])
    };
  };
  var priorAlpha = function(){return 1000;};
  var prior = {utilityTable:priorUtilityTable, discounting:priorDiscounting, alpha:priorAlpha};

  // Get world and observations
  var world = makeRestaurantChoiceMDP({noReverse:false});
  var observedStateAction = restaurantNameToObservationTime11['naive'];
  var posterior = getPosterior(world, prior, observedStateAction);
  
  // printTopK(posterior,8);
  // displayMarginals(posterior, ['alpha', 'discount', 'sophisticatedOrNaive',
  //                              'vegMinusDonut', 'donutNWins']);
};


var example2_optimal = function(){

  // Same helper functions as above
  ///fold:
  var restaurantHyperbolicInfer = getRestaurantHyperbolicInfer();
  var getPosterior = restaurantHyperbolicInfer.getPosterior;

  var displayResults = function(erp){
    var utility = erp.MAP().val.utility;
    print('MAP utility for Veg: ' + utility['Veg']);
    print('... and for Donut: ' + utility['Donut N'] + ' \n')
    viz.vegaPrint(getMarginalObject(erp,'vegMinusDonut'));
    viz.vegaPrint(getMarginalObject(erp,'sophisticatedOrNaive'));
    viz.vegaPrint(getMarginalObject(erp,'alpha'));
  };
  ///
  
  // Prior on agent's utility function
  var priorUtilityTable = function(){
    var utilityValues = [-10,0,10,20,30,40];
    var donut = [uniformDraw(utilityValues), 0];
    var veg = [uniformDraw(utilityValues), 0];
    return {
      'Donut N' : donut,
      'Donut S' : donut,
      'Veg'     : veg,
      'Noodle'  : [-10, -10],
      'timeCost': -.01
    };
  };

  // We assume no discounting (so *sophisticated* has no effect here)
  var priorDiscounting = function(){
    return {
      discount: 0,
      sophisticatedOrNaive: 'sophisticated'
    };
  };

  var priorAlpha = function(){return uniformDraw([0.1, 10, 100, 1000]);};
  var prior = {utilityTable:priorUtilityTable, discounting:priorDiscounting, alpha:priorAlpha};

  // Get world and observations
  var world = makeRestaurantChoiceMDP({noReverse:false});
  var observedStateAction = restaurantNameToObservationTime11['naive'];
  var posterior = getPosterior(world, prior, observedStateAction);
  
  // printTopK(posterior,8);
  // displayMarginals(posterior, ['alpha', 'discount', 'sophisticatedOrNaive',
  //                              'vegMinusDonut', 'donutNWins']);
};


var example3_biased = function(){ 
  ///fold:
  var restaurantHyperbolicInfer = getRestaurantHyperbolicInfer();
  var getPosterior = restaurantHyperbolicInfer.getPosterior;

  var displayResults = function(erp){
    print('MAP utility table: ' + JSON.stringify(erp.MAP().val.utility));
    viz.vegaPrint(getMarginalObject(erp,'vegMinusDonut'));
    viz.vegaPrint(getMarginalObject(erp,'sophisticatedOrNaive'));
    viz.vegaPrint(getMarginalObject(erp,'alpha'));
    print(JSON.stringify( getMarginalObject(erp,'alpha') ) )
  };
  ///
  
  // Prior on agent's utility function
  var priorUtilityTable = function(){
    var utilityValues =  [-10, 0, 10, 20, 30];
    var donut = [uniformDraw(utilityValues), -10];
    var veg = [uniformDraw(utilityValues), 20];
    return {
      'Donut N' : donut,
      'Donut S' : donut,
      'Veg'     : veg,
      'Noodle'  : [-5, -5],
      'timeCost': -.01
    };
  };

  var priorDiscounting = function(){ 
    return {
      discount: uniformDraw([0,1]),
      sophisticatedOrNaive: uniformDraw(['naive','sophisticated'])
    };
  };
  var priorAlpha = function(){return uniformDraw([.1, 10, 1000]);};
  var prior = {utilityTable:priorUtilityTable, discounting:priorDiscounting, alpha:priorAlpha};

  // Get world and observations
  var world = makeRestaurantChoiceMDP({noReverse:false});
  var observedStateAction = restaurantNameToObservationTime11['naive'];
  var posterior = getPosterior(world, prior, observedStateAction);
  
  // printTopK(posterior,8);
  // displayMarginals(posterior, ['alpha', 'discount', 'sophisticatedOrNaive',
  //                              'vegMinusDonut', 'donutNWins']);
};

var example4_donutNorth = function(){ 
  ///fold:
  var restaurantHyperbolicInfer = getRestaurantHyperbolicInfer();
  var getPosterior = restaurantHyperbolicInfer.getPosterior;

  var displayResults = function(erp){
    var utility = erp.MAP().val.utility;
    print('MAP utility for Veg: ' + utility['Veg'] 
          +'.  Donut N: ' + utility['Donut N'] +
          +'\n .  Donut S: ' + utility['Donut S']);

    var utilityERP = getMarginalObject(erp,'utility');
    var marginal = Enumerate(function(){
      var u = sample(utilityERP);
      return {'Donut N': u['Donut N'], 'Donut S': u['Donut S']};
    });
    
    viz.vegaPrint(getMarginalObject(erp,'discount'));
    var alphaPrint = Enumerate(function(){
      return {alpha: JSON.stringify(sample(erp).alpha) };
    });                          
    viz.vegaPrint(alphaPrint);
  };
  ///
  
  // Prior on agent's utility function
  var priorUtilityTable = function(){
    var utilityValues =  [-10, 0, 10, 20, 30];
    var donutN = [uniformDraw(utilityValues), -10]
    var veg = [uniformDraw(utilityValues), 20];
    return {
      'Donut N' : donutN,
      'Donut S' : [donutN[0] + uniformDraw([-3,0,3]), donutN[1]],
      'Veg'     : veg,
      'Noodle'  : [-5, -5],
      'timeCost': -.01
    };
  };

  var priorDiscounting = function(){ 
    return {
      discount: uniformDraw([0,1]),
      sophisticatedOrNaive: 'naive'
    };
  };
  var priorAlpha = function(){return uniformDraw([.1, 100, 1000]);};
  var prior = {utilityTable:priorUtilityTable, discounting:priorDiscounting, alpha:priorAlpha};

  // Get world and observations
  var world = makeRestaurantChoiceMDP({noReverse:true});
  var observedStateAction = restaurantNameToObservationTime11['naive'];
  var posterior = getPosterior(world, prior, observedStateAction);
  
  printTopK(posterior,8);
  displayMarginals(posterior, ['alpha', 'discount', 'sophisticatedOrNaive',
                               'vegMinusDonut', 'donutNWins']);
};

var example42_timeCost = function(){
  ///fold:
  var restaurantHyperbolicInfer = getRestaurantHyperbolicInfer();
  var getPosterior = restaurantHyperbolicInfer.getPosterior;

  var displayResults = function(erp){
    var utility = erp.MAP().val.utility;
    print('MAP utility for Veg: ' + utility['Veg'] 
          +'. Donut: ' + utility['Donut N']
          +'. Timecost: ' + utility['timeCost']);
    //viz.vegaPrint(getMarginalObject(erp,'timeCost'));
    viz.vegaPrint(getMarginalObject(erp,'discount'));
    var alphaPrint = Enumerate(function(){
      return {alpha: JSON.stringify(sample(erp).alpha) };
    });                          
    viz.vegaPrint(alphaPrint);
  };
  ///

  // Prior on agent's utility function
  var priorUtilityTable = function(){
    var utilityValues =  [-10, 0, 10, 20, 30];
    var donut = [uniformDraw(utilityValues), -10]
    var veg = [uniformDraw(utilityValues), 20];
    return {
      'Donut N' : donut,
      'Donut S' : donut,
      'Veg'     : veg,
      'Noodle'  : [-10, -10],
      'timeCost': uniformDraw([-.01, .1, 1])
    };
  };

  var priorDiscounting = function(){ 
    return {
      discount: uniformDraw([0,1]),
      sophisticatedOrNaive: 'sophisticated'
    };
  };
  var priorAlpha = function(){return uniformDraw([.1, 100, 1000]);};
  var prior = {utilityTable:priorUtilityTable, discounting:priorDiscounting, alpha:priorAlpha};

  // Get world and observations
  var world = makeRestaurantChoiceMDP();
  var observedStateAction = restaurantNameToObservationTime11['sophisticated'];
  var posterior = getPosterior(world, prior, observedStateAction);
  printTopK(posterior,8);
  displayMarginals(posterior, ['alpha', 'discount', 'sophisticatedOrNaive',
                               'timeCost',
                               'vegMinusDonut', 'donutNWins']);
  //displayResults(posterior);
};
example42_timeCost();
1;
