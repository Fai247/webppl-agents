


var getRestaurantHyperbolicInfer = function(){

  var getObservations = function(world, start, pathName){
    var temptationUtility = makeRestaurantUtilityMDP(world, {
      'Donut N' : [10, -10],
      'Donut S' : [10, -10],
      'Veg'   : [-10, 20],
      'Noodle': [-5, -5],
      'timeCost': -.01,
    });
    
    var discount = pathName=='vegDirect' ? 0 : 1;
    var sophisticatedOrNaive = pathName=='naive' ? 'naive' : 'sophisticated';
    
    var agent = makeHyperbolicDiscounter(
      { utility : temptationUtility,
        alpha : 500, 
        discount : discount, 
        sophisticatedOrNaive  : sophisticatedOrNaive
      }, world);
    var observedStateAction = simulateHyperbolic(start, world, agent);
    var observedLocs = getLocationsHyperbolic(observedStateAction);   
    assert.ok( _.isEqual( observedLocs, restaurantNameToPath[pathName]), 'generated matches stored');
    return observedStateAction;
  };
  
  var factorSequence = function(agentAction, observedStateAction){
    map(function (stateAction) {
      var state   = stateAction[0];
      var action  = stateAction[1];
      factor(agentAction(state, 0).score([], action)) ; 
    }, observedStateAction);
  };

  var getPosterior = function(priorUtilityTable, priorDiscounting, priorAlpha, observedStateAction){
    return Enumerate(function () {
      var utilityTable = priorUtilityTable();
      var discounting = priorDiscounting();
      var alpha = priorAlpha();
      
      var agent = makeHyperbolicDiscounter(
        { utility   : makeRestaurantUtilityMDP(world, utilityTable),
          alpha     : alpha, 
          discount  : discounting.discount, 
          sophisticatedOrNaive : discounting.sophisticatedOrNaive
        }, world);
      var agentAction = agent.act;
      
      factorSequence(agentAction, observedStateAction);

      var vegMinusDonut = sum(utilityTable['Veg']) - sum(utilityTable['Donut N']);
      var donutNWins = sum(utilityTable['Donut S']) < sum(utilityTable['Donut N']);
      
      return {utility: utilityTable, 
              discount: discounting.discount, 
              alpha: alpha,
              sophisticatedOrNaive: discounting.sophisticatedOrNaive,
              vegMinusDonut: vegMinusDonut,
              donutNWins: donutNWins
             };
    });
  };

  return {getObservations: getObservations, getPosterior: getPosterior};
};



var world = restaurantChoiceMDP; // noReverse: true

// TODO why does this not work?
//var world = makeDonutWorld2({big:true, noReverse:false}); 

// loc: [3,1], timeLeft:11
var start = restaurantChoiceStart; // TODO starts at [3,1]. Why does the agent do weird things when starting at [3,0]?
var restaurantHyperbolic = getRestaurantHyperbolicInfer();
var getObservations = restaurantHyperbolic.getObservations;
var getPosterior = restaurantHyperbolic.getPosterior;



// Condition on naive/soph/vegDirect with the same prior
// Prior includes utilities and discouting with a minimal number of parameters
// *discountingOn* allows for discount > 0
// *timeCostDonut* includes possibly +ve timeCost and different values for DonutS and donutN
var hyperbolicQuick = function(alphaValues, discountingOn, timeCostDonut){
  
  var priorAlpha = function(){return uniformDraw(alphaValues);};

  var priorUtilityTable = function(){
    var c = 0;  // TODO why does this mess up when c=10?
    var getU = function(){return uniformDraw([-10,10,20]);};
    var donut = [getU()+c, getU()+c];
    var veg = [getU()+c, getU()+c];

    var donut2 = timeCostDonut ?
        [donut[0]+uniformDraw([-5,5]), donut[1]] : donut;
    var timeCost = timeCostDonut ? uniformDraw([-.01, .5]) : -.01;
    
    return {
      'Donut N' : donut,
      'Donut S' : donut2,
      'Veg'     : veg,
      'Noodle'  : [-5+c, -5+c],
      'timeCost': timeCost
    };
  };
  
  var priorDiscounting = function(){
    return {
      discount: uniformDraw([0,1]),
      sophisticatedOrNaive: uniformDraw(['sophisticated', 'naive']),
    };
  };

  var priorDiscounting = discountingOn ? priorDiscounting :
      function(){return {discount:0, sophisticatedOrNaive:'naive'};}

  var run = function(observationName){
    var observedStateActionSequence = getObservations(world, start, observationName);
    var posterior = getPosterior(priorUtilityTable, priorDiscounting, priorAlpha, 
                                 observedStateActionSequence);
    console.log(' \n\n', observationName, ' : '); 
    printTopK(posterior,4);
    displayMarginals(posterior,['alpha', 'discount', 'sophisticatedOrNaive', 'vegMinusDonut',
                               'donutNWins']);
  }
  run('naive'); 
  run('sophisticated');
  run('vegDirect');
};




var runHyperbolicQuick = function(){
  // TODO: with noReverse=true, with alpha=50, we don't infer naive/soph marginals correctly
  // (but this does work OK with alpha=500)
  var alphaValues = [.5, 10, 50, 500];
  var discountingOn = true;
  var timeCostDonut = false;
  hyperbolicQuick(alphaValues, discountingOn,timeCostDonut);

  // compare to model without discounting, which infers that alpha is small
  // (should not infer this for vegDirect). this seems to work. 
  var discountingOn = false;
  var timeCostDonut = false;
  //hyperbolicQuick(alphaValues, discountingOn,timeCostDonut);

  // Should learn DonutNWins for *naive*, timeCost=.5 for *sophisticated*
  // and neither for *vegDirect*
  var discountingOn = false
  var timeCostDonut = true;
  //hyperbolicQuick(alphaValues, discountingOn, timeCostDonut);
};

// runHyperbolicQuick();
// ash();



// Naive params that yield temptation 
var priorAlpha = function(){return 3;};

// Single variable case
var priorUtilityTable = function(){
  var getU = function(){return uniformDraw( _.range(-4,20,1));}
  var donut = [10, 0]; // take MAP params for all but veg 2. 
  var veg = [10, getU()]; 
  
  return {
    'Donut N' : donut,
    'Donut S' : donut,
    'Veg'     : veg,
    'Noodle'  : [-5, -5],
    'timeCost': -.01
  };
};

// Two variable case
var priorUtilityTable2 = function(){
  var getU = function(){return uniformDraw( _.range(-4,20,2));}
  var donut = [getU(), 0]; // take MAP params for all but veg 2. 
  var veg = [10, getU()]; 
  
  return {
    'Donut N' : donut,
    'Donut S' : donut,
    'Veg'     : veg,
    'Noodle'  : [-5, -5],
    'timeCost': -.01
  };
};
var priorUtilityTable = priorUtilityTable2;

var priorDiscounting = function(){
  return { discount: 1, sophisticatedOrNaive: 'naive'};
};

// var observationName = 'naive';
// var observedStateActionSequence = getObservations(world, start, observationName);
// var posterior = getPosterior(priorUtilityTable, priorDiscounting, priorAlpha, observedStateActionSequence);
// var marginalVeg = Enumerate( function(){
//   return sample(posterior).utility.Veg[1];
// });
// console.log('marginal veg');
// printERP(marginalVeg);

// displayMarginals(posterior, ['sophisticatedOrNaive', 'discount', 'vegOverDonut']);
// printTopK(posterior,5);






var exampleGetPosterior = function(priorUtilityTable, priorDiscounting, observedStateAction){
  return Enumerate(function () {
    // Sample parameters from prior
    var utilityTable = priorUtilityTable();
    var vegMinusDonut = sum(utilityTable['Veg']) - sum(utilityTable['Donut N']);

    var sophisticatedOrNaive = priorSophisticatedOrNaive();

    // Create agent with those parameters
    var agent = makeHyperbolicDiscounter(
      { utility   : makeRestaurantUtilityMDP(world, utilityTable),
        alpha     : 1000, 
        discount  : 1,
        sophisticatedOrNaive : sophisticatedOrNaive
      }, world);
    
    var agentAction = agent.act;

    // Condition on observed actions
    map(function (stateAction) {
      var state   = stateAction[0];
      var action  = stateAction[1];
      factor(agentAction(state, 0).score([], action)) ; 
    }, observedStateAction);
    
    return {
      utility: utilityTable, 
      sophisticatedOrNaive: discounting.sophisticatedOrNaive,
      vegMinusDonut: vegMinusDonut,
    };
  });
};


var example1_inferType = function(){
  // Fold
  var runInference = function(observationName){
    var restaurantHyperbolic = getRestaurantHyperbolicInfer();
    var getObservations = restaurantHyperbolic.getObservations;
    var getPosterior = restaurantHyperbolic.getPosterior;
    
    var observedStateActionSequence = getObservations(world, start, observationName);
    return getPosterior(priorUtilityTable, priorDiscounting, priorAlpha, 
                        observedStateActionSequence);
  };
 
  var priorUtilityTable = function(){
    var utilityValues = [-10,0,10,20];
    var getUtilityPair = function(){return [uniformDraw(utilityValues), uniformDraw(utilityValues)];};
    var donut = getUtilityPair();
    var veg = getUtilityPair();
    return {
      'Donut N' : donut,
      'Donut S' : donut,
      'Veg'     : veg,
      'Noodle'  : [-10, -10],
      'timeCost': -.05
    };
  };
  
  var priorDiscounting = function(){
    return {
      discount: 1,
      sophisticatedOrNaive: uniformDraw(['sophisticated', 'naive']),
    };
  };

  var priorAlpha = function(){return 1000;};
  
  runInference('naive'); 
  runInference('sophisticated');
  runInference('vegDirect');
};

example1_inferType(); ash();
