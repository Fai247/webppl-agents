
// Hyperbolic Inference example 1: Naive Trajectory
// -- Goes from bottom to Donut North
// Inference should infer that Donut has [high,low] utility
// and Veg the opposite.

// Start at bottom. 
var start = { 
  loc : [3,0],
  terminateAfterAction : false,
  restaurantTimeLeft : 2, 
  timeLeft : 13
};


// Create trajectory that we'll use to condition on

// TODO: have *options* argument for makeDonutUtility
// so that *max_restaurantTimeLeft* is a property of options. Could
// also use this to have a default value for max_restaurantTimeLeft. 
var donutUtility = makeDonutUtility(2, {
    'Donut N' : [10, -10],
    'Donut S' : [10, -10],
    'Veg'   : [-10, 20],
    'Noodle': [0, 0]
});


var world = makeDonutWorld2({ big : true, noReverse : true});
var actual_agent = makeHyperbolicDiscounter(
    { utility : donutUtility,
      alpha : 500, 
      discount : 1, 
      sophisticatedOrNaive  : 'sophisticated' 
    }, world);
var observed = simulate(start, world, actual_agent, start.timeLeft, 'both');


// Inference only on utilities of Donut and Veg

// TODO: pull out the constants. Have a function
// *makeHyperbolicAgent(Udonut1, Udonut2, uveg1, uveg2)*
// So the function inside enumerate is mainly just the
// sampling from the prior and the factor. 

var posterior = Enumerate(function () {
  var discount = 1;
  var type = 'sophisticated';
  var alpha = 500;
  var Udonut1 = uniformDraw([-10,  10, 20]);
  var Udonut2 = uniformDraw([-10,  10, 20]);
  var Uveg1   = uniformDraw([-10,  10, 20]);
  var Uveg2   = uniformDraw([-10,  10, 20]);

  var donutUtility = makeDonutUtility(2, {
      'Donut N' : [Udonut1, Udonut2],
      'Donut S' : [Udonut1, Udonut2],
      'Veg'     : [Uveg1, Uveg2],
      'Noodle'  : [0, 0]
  });

  var agent = makeHyperbolicDiscounter(
      { utility   : donutUtility,
        alpha     : alpha, 
        discount  : discount, 
        sophisticatedOrNaive  : type,
      }, world);
  var agentAction = agent.agent;

  map(function (stateAction) {
    var state   = stateAction[0];
    var action  = stateAction[1];

    factor(agentAction(state, 0).score([], action)) ; 
  }, observed);

  return { Udonut1 : Udonut1, Udonut2 : Udonut2, 
           Uveg1 : Uveg1, Uveg2 : Uveg2
         };
});

viz.print(posterior);
