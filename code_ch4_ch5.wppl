var printERP = function(x) {
  var erpValues = sort(x.support(), undefined, function(v){return -x.score([], v);});
  map(
    function(v){
      var prob = Math.exp(x.score([], v));
      if (prob > 0.0){
        console.log(JSON.stringify(v) + ': ' + prob.toFixed(5));
      }
    },
    erpValues);
};
// var alpha = 100;
// var params = makeDonut(0,100);
// var transition = params.transition;
// var utility = params.utility;
// var actions = params.actions;

var displaySequence = function( stateActions, params ){
  return GridWorld.zipToDisplayGrid( stateActions, params.xLim, params.yLim, true )
};

var toStr = function(state){return JSON.stringify(state);}


var makeHike = function(noiseProb, alpha){
  var xLim = 5;
  var yLim = 5;
  var blockedStates = [ [1,2], [1,3], [3,2] ];
  var terminals = [ [0,0], [1,0], [2,0], [3,0], [4,0], [2,2], [4,2] ]; 

  var u = function(state,action){
    if (gridEqual(state,[2,2])){return 1;}
    if (gridEqual(state,[4,2])){return 10;}
    if (isPostTerminal(state)){return 0;};
    if (stateInArray(state,terminals)) {return -10;}
    return -0.1;
  };
  return makeBlockedGridParams(xLim, yLim, blockedStates, terminals, u, noiseProb, alpha);
};


var params = makeHike(0, 10);
var alpha = params.alpha;
var transition = params.transition;
var utility = params.utility;
var actions = params.actions;
var isTerminal = function(state){return state[0]=='dead';};


var agent = dp.cache(function(state, timeLeft){
  return Enumerate(function(){
    var action = uniformDraw(actions);
    var eu = expUtility(state, action, timeLeft);    
    factor( alpha * eu);
    return action;
  });      
});


var expUtility = dp.cache(function(state, action, timeLeft){
  var u = utility(state,action);
  var newTimeLeft = timeLeft - 1;
  
  if (newTimeLeft == 0 | isTerminal(state)){
    return u; 
  } else {                     
    return u + expectation( Enumerate(function(){
      var nextState = transition(state, action); 
      var nextAction = sample(agent(nextState, newTimeLeft));
      return expUtility(nextState, nextAction, newTimeLeft);  
    }));
  }                      
});

var simulate = function(startState, totalTime){
  
  var sampleSequence = function(state, timeLeft){
    if (timeLeft == 0 | isTerminal(state)){
      return [];
    } else {
      var action = sample(agent(state, timeLeft));
      var nextState = transition(state,action); 
      return [state].concat( sampleSequence(nextState,timeLeft-1 ))
    }
  };
  return sampleSequence(startState, totalTime);
};

// var out = simulate([2,0],7);
// displaySequence( out, params);
// console.log(out);



var start = [0,1];
var totalTime = 12;


var out = Rejection(function(){return simulate(start,totalTime).length;},500);
printERP(out);
ash();


//var out = simulate(start,totalTime);


displaySequence( out, params);
console.log(out);
