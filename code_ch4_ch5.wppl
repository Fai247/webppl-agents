var printERP = function(x) {
  var erpValues = sort(x.support(), undefined, function(v){return -x.score([], v);});
  map(
    function(v){
      var prob = Math.exp(x.score([], v));
      if (prob > 0.0){
        console.log(JSON.stringify(v) + ': ' + prob.toFixed(5));
      }
    },
    erpValues);
};

var displaySequence = function( stateActions, params ){
  return GridWorld.zipToDisplayGrid( stateActions, params.xLim, params.yLim, true )
};



var noiseProb = 0;
var alpha = 100;
var utilityEast = 10;
var utilityWest = 1;
var utilityHill = -10;
var timeCost = -.1;

var params = makeHike(noiseProb, alpha, utilityEast, utilityWest, utilityHill, timeCost);
displayGrid(params);

var alpha = params.alpha;
var transition = params.transition;
var utility = params.utility;
var actions = params.actions;
var isTerminal = function(state){return state[0]=='dead';};


var agent = dp.cache(function(state, timeLeft){
  return Enumerate(function(){
    var action = uniformDraw(actions);
    var eu = expUtility(state, action, timeLeft);    
    factor( alpha * eu);
    return action;
  });      
});


var expUtility = dp.cache(function(state, action, timeLeft){
  var u = utility(state,action);
  var newTimeLeft = timeLeft - 1;
  
  if (newTimeLeft == 0 | isTerminal(state)){
    return u; 
  } else {                     
    return u + expectation( Enumerate(function(){
      var nextState = transition(state, action); 
      var nextAction = sample(agent(nextState, newTimeLeft));
      return expUtility(nextState, nextAction, newTimeLeft);  
    }));
  }                      
});

var simulate = function(startState, totalTime){
  
  var sampleSequence = function(state, timeLeft){
    if (timeLeft == 0 | isTerminal(state)){
      return [];
    } else {
      var action = sample(agent(state, timeLeft));
      var nextState = transition(state,action); 
      return [[state,action]].concat( sampleSequence(nextState,timeLeft-1 ))
    }
  };
  return sampleSequence(startState, totalTime);
};

// var out = simulate([2,0],7);
// displaySequence( out, params);
// console.log(out);



var start = [0,1];
var totalTime = 12;


// var out = Rejection(function(){return simulate(start,totalTime).length;},500);
// printERP(out);
// ash();


var out = simulate(start,totalTime);
console.log('display seq \n\n');
displaySequence( out, params);
// var out2 = timeit(function(){return simulate( [2,1], totalTime-2);});
// console.log('out2 time \n:', out2.runtimeInMilliseconds);
// displaySequence( out2.value, params);

//console.log(out);


