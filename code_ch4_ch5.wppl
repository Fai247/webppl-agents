var printERP = function(x) {
  var erpValues = sort(x.support(), undefined, function(v){return -x.score([], v);});
  map(
    function(v){
      var prob = Math.exp(x.score([], v));
      if (prob > 0.0){
        console.log(JSON.stringify(v) + ': ' + prob.toFixed(5));
      }
    },
    erpValues);
};

var selectIndex = function(ar,i){
    return  map(function(tuple){return tuple[i];}, ar);
};

var downToOne = function(n){
  if (n==0){return [];}
  else {return [n].concat(downToOne(n-1));}
};


var displaySequence = function( stateActions, params ){
  return GridWorld.zipToDisplayGrid( stateActions, params.xLim, params.yLim, true )
};





var mdpSimulate = function(startState, totalTime, params, numRejectionSamples, getExpUtilityValues){
  var alpha = params.alpha;
  var transition = params.transition;
  var utility = params.utility;
  var actions = params.actions;
  var isTerminal = function(state){return state[0]=='dead';};


  var agent = dp.cache(function(state, timeLeft){
    return Enumerate(function(){
      var action = uniformDraw(actions);
      var eu = expUtility(state, action, timeLeft);    
      factor( alpha * eu);
    return action;
    });      
  });
  
  
  var expUtility = dp.cache(function(state, action, timeLeft){
    var u = utility(state,action);
    var newTimeLeft = timeLeft - 1;
    
    if (newTimeLeft == 0 | isTerminal(state)){
      return u; 
    } else {                     
      return u + expectation( Enumerate(function(){
        var nextState = transition(state, action); 
        var nextAction = sample(agent(nextState, newTimeLeft));
        return expUtility(nextState, nextAction, newTimeLeft);  
      }));
    }                      
  });
  
  var simulate = function(startState, totalTime){
  
    var sampleSequence = function(state, timeLeft){
      if (timeLeft == 0 | isTerminal(state)){
        return [];
      } else {
      var action = sample(agent(state, timeLeft));
        var nextState = transition(state,action); 
        return [[state,action]].concat( sampleSequence(nextState,timeLeft-1 ))
      }
    };
    return Rejection(function(){return sampleSequence(startState, totalTime);}, numRejectionSamples);
  };


  var getExpUtility = function(){
    var erp = simulate(startState, totalTime);
    var states = selectIndex(erp.MAP().val,0);
    var timeStates = zip(downToOne(states.length), states);
    
    return map( function(timeState){
      var timeLeft = timeState[0];
      var state = timeState[1];
      return [JSON.stringify(state), map(function(action){
        return expUtility(state, action, timeLeft);
      }, params.actions)];
    }, timeStates);
  };
  
  
  return !getExpUtilityValues ? simulate(startState, totalTime) : 
    {erp: simulate(startState, totalTime),
     stateToExpUtilityLRUD:  getExpUtility()};

};

// fixed params
var utilityEast = 10;
var utilityWest = 1;
var utilityHill = -10;
var timeCost = -.1;
var startState = [0,1];

// ch5 codebox 1-2
var alpha = 100;
var noiseProb = 0;
var params = makeHike(noiseProb, alpha, utilityEast, utilityWest, utilityHill, timeCost);
displayGrid(params,startState);

var totalTime = 12;
var numRejectionSamples = 1;
var out = sample( mdpSimulate(startState, totalTime, params, numRejectionSamples) );
displaySequence( out, params);
console.log('box 12: ', out, '\n\n----------');


// ch5 codebox 3 - noisy agent
// var alpha = 10;
// var noiseProb = 0;
// var params = makeHike(noiseProb, alpha, utilityEast, utilityWest, utilityHill, timeCost);

// var totalTime = 12;
// var numRejectionSamples = 500;
// var erp = Enumerate( function(){
//   return sample(mdpSimulate(startState, totalTime, params, numRejectionSamples)).length;
// } );
// console.log('   erp box 3 \n'); printERP(erp);
//viz.print(erp);


// ch5 codebox 4 -- stochastic transitions
var timeCost = -.1;

var alpha = 100;
var noiseProb = 0.1;
var totalTime = 12;
var numRejectionSamples = 1;
var params = makeHike(noiseProb, alpha, utilityEast, utilityWest, utilityHill, timeCost);
var out = sample(mdpSimulate(startState, totalTime, params, numRejectionSamples));
console.log('stoch \n' ); displaySequence(out,params);
console.log('stochastic transitions', out);


// ch5 codebox on expected values
var timeCost = -.2;
var utilityWest = 7;
var utilityEast = 10;


var alpha = 100;
var noiseProb = 0.05;
var totalTime = 12;
var numRejectionSamples = 1;
var params = makeHike(noiseProb, alpha, utilityEast, utilityWest, utilityHill, timeCost);
var getExpUtilityValues = true;
var out = mdpSimulate(startState, totalTime, params, numRejectionSamples, getExpUtilityValues);
console.log('stoch EVS \n' ); 
var samp = sample(out.erp);
displaySequence(samp, params);
console.log('stochastic transitions EVS')
printERP(out.erp);
console.log('\n\n stochastic transitions EVS: \n', out.stateToExpUtilityLRUD);
GridWorld.displayExpUtility( out.stateToExpUtilityLRUD, 5,5 );




//console.log(out);


