// Helper functions for testing argument types (warning: heuristics only)
var isGreaterZero = function (x) {return _.isFinite(x) && x > 0;};
var isERP = function (x) {return x.hasOwnProperty('score')
			  && x.hasOwnProperty('sample');};
var isState = function (x) {x.hasOwnProperty('latentState')
			    && _.isFinite(x.manifestState.timeLeft);};
// note: isGridworld is different in this file than how it is in other files
var isGridworld = function(world){return arraysEqual(world.actions,
						     ['l', 'r', 'u', 'd'])
				  && world.hasOwnProperty('feature')
				  && world.hasOwnProperty('xLim')
				  && world.hasOwnProperty('yLim')
				  && world.hasOwnProperty('transition');};
var isPOMDP = function (x) { return x.hasOwnProperty('transition')
			     && x.hasOwnProperty('manifestStateToActions')
			     && x.hasOwnProperty('observe');};

// POMDP AGENT AND WORLD

// Helper function for building state from its components
var buildState = function (manifestState, latentState) {
  return { manifestState:manifestState, latentState:latentState };
};


// POMDP AGENT WITHOUT DELAYS
// basically the same as makeBeliefDelayAgent without delays or discounting

var makeBeliefAgent = function(agentParams, world) {
  map(function(s){assert.ok(agentParams.hasOwnProperty(s),'makeBeliefAgent args');}, 
      ['utility','alpha', 'priorBelief']);
  assert.ok( isPOMDP(world),
	     'world argument lacks transition, stateToActions, or observe');

  var utility = agentParams.utility;

  var manifestStateToActions = world.manifestStateToActions;
  var transition = world.transition;
  var observe = world.observe;

  var updateBelief = dp.cache(
    function(manifestState, currentBelief, observation){
      return Enumerate(function(){
	var latentState = sample(currentBelief);
	var state = buildState(manifestState, latentState);
	condition(_.isEqual(observe(state), observation));
	return latentState;
      });
    });

  var agent = dp.cache(
    function(manifestState, currentBelief, observation) {
      assert.ok(_.isFinite(manifestState.timeLeft) && isERP(currentBelief),
		'agent args fail');

      var newBelief = updateBelief(manifestState, currentBelief, observation);

      return Enumerate(function(){
	var action = uniformDraw(manifestStateToActions(manifestState));
	var eu = expectedUtility(manifestState, newBelief, action);
	factor(agentParams.alpha * eu);
	return {action: action, belief: newBelief};
      });
    });

  var expectedUtility = dp.cache(
    function(manifestState, currentBelief, action) {
      return expectation(
	Enumerate(function(){
	  var latentState = sample(currentBelief);
	  var state = buildState(manifestState, latentState);
	  var u = utility(state, action);
	  if (state.manifestState.dead) {
	    return u;
	  } else {
	    var nextState = transition(state, action);
	    var nextAction = sample(agent(nextState.manifestState,
					  currentBelief,
					  observe(nextState)));
	    var futureU = expectedUtility(nextState.manifestState,
					  nextAction.belief,
					  nextAction.action);
	    return u + futureU;
	  }
	})
      );
    });

  return {agent: agent, expectedUtility: expectedUtility, agentParams: agentParams};
};

// *simulateBeliefDelayAgent* doesn't actually refer to the delays, so I can copy and
// paste it here
var simulateBeliefAgent = function (startState, world, agent, actualTotalTime,
				    outputStatesOrActions) {
  var perceivedTotalTime = startState.manifestState.timeLeft;
  assert.ok( actualTotalTime <= perceivedTotalTime && isState(startState),
	     'simulate args');
  assert.ok( perceivedTotalTime  > 1, 'perceivedTime<=1. If=1 then should have state.dead, but then simulate wont work');

  var agentAction = agent.agent;
  var priorBelief = agent.agentParams.priorBelief;
  var transition = world.transition;
  var observe = world.observe;

  var cutoffCondition = function (actualTimeLeft, state) {
    return actualTimeLeft == 0 || state.dead;
  };


  var sampleSequence = function(state, currentBelief, actualTimeLeft) {
    if (cutoffCondition(actualTimeLeft, state.manifestState) ) {
      return [];
    } else {
      var nextAction = sample(agentAction(state.manifestState, currentBelief,
					  observe(state)));
      
      var nextState = transition(state, nextAction.action);
      var out = {states:state, actions:nextAction, both:[state, nextAction],
                 stateBelief: [state, currentBelief]}[outputStatesOrActions];
      // could return observations
      
      return [out].concat( sampleSequence(nextState, nextAction.belief,
					  actualTimeLeft - 1));
    }
  };
  return sampleSequence(startState, priorBelief, actualTotalTime);
};

var printOut = function ( trajectory ) {
  console.log('trajectory', map( function (state) {return state.manifestState.loc;},
				 trajectory) );
  //console.log('expUtilities', out.startEU);
};

var myDonutWorld = makeDonutWorldExtended({bottomLeftNook: {name: 'DonutSouth'}});
var donutFeature = myDonutWorld.feature;
var myDonutPOMDP = makeGridworldPOMDP(myDonutWorld);

var donutLikingUtility = function(state, action) {
  var name = donutFeature(state.manifestState).name;
  if (name === 'Donut' || name === 'DonutSouth') {
    return 5;
  } else if (name === 'Noodle') {
    return 1;
  } else if (name === 'Veg') {
    return 2;
  } else {
    return -0.1;
  }
};

var noodleLikingUtility = function(state, action) {
  var name = donutFeature(state.manifestState).name;
  if (name === 'Donut' || name === 'DonutSouth') {
    return 1;
  } else if (name === 'Noodle') {
    return 5;
  } else if (name === 'Veg') {
    return 2;
  } else {
    return -0.1;
  }
};

var priorBelief = Enumerate(function(){
  if (flip(0.9)) {
    return {Donut: true,
	    DonutSouth: false,
	    Veg: true,
	    Noodle: true};
  } else {
    return {Donut: true,
	    DonutSouth: true,
	    Veg: true,
	    Noodle: false};
  }
});

var donutAgent = makeBeliefAgent({utility: donutLikingUtility,
				  alpha: 500,
				  priorBelief: priorBelief},
				 myDonutPOMDP);

var noodleAgent = makeBeliefAgent({utility: noodleLikingUtility,
				   alpha: 500,
				   priorBelief: priorBelief},
				  myDonutPOMDP);

var myStart = {manifestState: {loc: [2,1],
			       dead: false,
			       timeLeft: 10,
			       digest: 1},
	       latentState: {Donut: true,
			     DonutSouth: true,
			     Veg: true,
			     // Noodle: true
			     Noodle: false}};

// agent likes donuts. they could go to donutSouth and get donuts, but they won't,
// because they don't think that donutSouth is open.
var donutTrajectory = simulateBeliefAgent(myStart, myDonutPOMDP, donutAgent, 10,
					  'states');
console.log('donutTrajectory');
printOut(donutTrajectory);
// agent likes noodles. they go to the noodle shop, see that it's closed, then go
// to veg instead.
var noodleTrajectory = simulateBeliefAgent(myStart, myDonutPOMDP, noodleAgent,
					   10, 'states');
console.log('noodleTrajectory');
printOut(noodleTrajectory);
