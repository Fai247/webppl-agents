// Run as: webppl test.wppl --require .



var grid43Example = function(){
  var noiseProb = .1;
  var alpha = 100;
  var params = make43(noiseProb, alpha);
  var startState = [0,0];
  var actualTotalTime = 6;
  var perceivedTotalTime = actualTotalTime;
  var numberRejectionSamples = 500;
  var output = 'both';
  var getExpUtilityValues = false;
  var out = mdpSimulate(startState, actualTotalTime, perceivedTotalTime, params, numberRejectionSamples,
                        getExpUtilityValues, output);
  console.log('\n\n DISPLAY MAP PATH')
  gridworldLibrary.zipToDisplayGrid( out.erp.MAP().val, 3,3, true );
  console.log('\n\n expUValues for MAP: ', out.expUtilityValues, ' \n\n MAP  ', out.erp.MAP().val);
  
  var clean = function(ar){return map(function(pair){return pair[0][0] + JSON.stringify(pair[0][1]);},ar)};
  console.log('\n\n samples', repeat( 20, function(){return clean(sample(out.erp));}) )

};
grid43Example();



var donutTest = function(){
  var noiseProb = 0;
  var alpha = 30;
  var params = makeDonut(noiseProb, alpha);
  displayGrid(params);
  
  var startState = [2,0];
  var actualTotalTime = 7;
  var perceivedTotalTime = actualTotalTime;
  var getExpUtilityValues = true;
  var output = 'both';
  var numberRejectionSamples = 1000;
  var out = mdpSimulate(startState, actualTotalTime, perceivedTotalTime, params, numberRejectionSamples,
                        getExpUtilityValues, output);
  console.log('expUValues: ', out.expUtilityValues, ' \n\n MAP  ', out.erp.MAP().val);
  GridWorld.zipToDisplayGrid( out.erp.MAP().val, 6,6,true);
  
  printERP(out.erp,10);
};



var smallGridTest = function(){
  

  var runSmall = function(noiseProb, alpha, actualTotalTime, numberRejectionSamples){
    var params = makeSmall(noiseProb, alpha);
    displayGrid(params);
    var startState = [0,0];
    var perceivedTotalTime = actualTotalTime;
    var getExpUtilityValues = true;
    var output = 'both';
    var out = mdpSimulate(startState, actualTotalTime, perceivedTotalTime, params, numberRejectionSamples,
                          getExpUtilityValues, output);
    console.log('\n\n DISPLAY MAP PATH')
    GridWorld.zipToDisplayGrid( out.erp.MAP().val, 3,3, true );
    console.log('\n\n expUValues for MAP: ', out.expUtilityValues, ' \n\n MAP  ', out.erp.MAP().val);
    
    var clean = function(ar){return map(function(pair){return pair[0][0] + JSON.stringify(pair[0][1]);},ar)};
    console.log('\n\n samples', repeat( 20, function(){return clean(sample(out.erp));}) )
  };

  console.log('\n Small grid, non-stoch transition, alpha=10 \n------------');
  runSmall(0,10,6,0);
  console.log('\n\n SMALL GRID 2: stochastic transitions, alpha=100 \n--------------');
  runSmall(0.5,100,5,1000);
};





// Unit tests for inGrid and the transition function
var testInGrid = function(){
  assert.ok(inGrid(4,4,[0,0]) & inGrid(4,4,[3,2]) & inGrid(4,4,[3,3]) & inGrid(2,2,[1,1]), 'ingrid' );
  assert.ok( !(inGrid(4,4,[1.5,0]) | inGrid(4,4, ['u',0]) | inGrid(4,4,[-1,0]) |
               inGrid(4,4, [1.5,10]) | inGrid(2,2,[2,0]) | inGrid(4,4,['1',0]) ), 'ingrid' )
  console.log('passed testInGrid');
};


var testTransition = function(){
  var t = makeGridTransition(4,4,[],[]);
  assert.ok(  gridEqual( t([0,0],'l'), [0,0]) & 
              gridEqual( t([0,0],'r'), [1,0]) &  
              gridEqual( t([0,0],'u'), [0,1]), 'testTransition1' );
  
  var t = makeGridTransition(4, 4, [ [1,0], [1,1], [3,3] ],[]);

  assert.ok(  gridEqual( t([0,0],'l'), [0,0]) &
              gridEqual( t([0,0],'r'), [0,0]) & 
              gridEqual( t([0,0],'u'), [0,1]) & 
              gridEqual( t([0,1],'r'), [0,1]) &
              gridEqual( t([1,2],'d'), [1,2]) &
              gridEqual( t([2,3],'r'), [2,3]) &
              gridEqual( t([3,2],'u'), [3,2]), 'testTransition2'); 
  var t = makeStochasticGridTransition(4, 4, [ [1,0], [1,1], [3,3] ], .000000001, []);
  assert.ok(  gridEqual( t([0,0],'l'), [0,0]) &
              gridEqual( t([0,0],'r'), [0,0]) & 
              gridEqual( t([0,0],'u'), [0,1]) & 
              gridEqual( t([0,1],'r'), [0,1]) &
              gridEqual( t([1,2],'d'), [1,2]) &
              gridEqual( t([2,3],'r'), [2,3]) &
              gridEqual( t([3,2],'u'), [3,2]), 'testTransition3');

  
  var t = makeStochasticGridTransition(4, 4, [ ], .5, []);
  var thunk = function(){return t([1,1],'u');};
  var erp = Enumerate( thunk );
  assert.ok( gridEqual( erp.MAP().val, [1,2] ) )
  assert.ok( filter(function(pair){return gridEqual([0,1],pair);}, repeat(1000, thunk) ), 'testStoch' )
  
  console.log('passed transition');
};


donutTest();
