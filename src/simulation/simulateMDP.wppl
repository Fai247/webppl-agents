var simulateMDPAgentOptimal = function(startState, world, agent, outputType) {
  // if outputType is undefined, default to states
  var act = agent.act;
  var transition = world.transition;
  var outputType = outputType ? outputType : 'states';

  var selectOutput = function(state, action) {
    var table = {
      states: state,
      actions: action,
      stateAction: [state, action]
    };
    return table[outputType];
  };

  var sampleSequence = function(state) {
    var action = sample(act(state));
    var nextState = transition(state, action);
    var out = selectOutput(state, action);
    return state.terminateAfterAction ? [out] :
      [out].concat(sampleSequence(nextState));
  };
  return sampleSequence(startState);
};


var simulateMDPAgentHyperbolic = function(startState, world, agent, outputType) {
  var act = agent.act;
  var expectedUtility = agent.expectedUtility;
  var transition = world.transition;
  var outputType = outputType ? outputType : 'states';

  var selectOutput = function(state, action) {
    var table = {
      states: state,
      actions: action,
      stateAction: [state, action]
    };
    return table[outputType];
  };

  var sampleSequence = function(state) {
    var delay = 0;
    var action = sample(act(state, delay));
    var nextState = transition(state, action);
    var out = selectOutput(state, action);
    return state.terminateAfterAction ? [out] : [out].concat(sampleSequence(nextState));
  };
  return sampleSequence(startState);
};


var simulateMDP = function(startState, world, agent, outputType) {
  var params = agent.params;
  if (isOptimalMDPAgent(params)) {
    return simulateMDPAgentOptimal(startState, world, agent, outputType)
  } else {
    return simulateMDPAgentHyperbolic(startState, world, agent, outputType)
  }
};
