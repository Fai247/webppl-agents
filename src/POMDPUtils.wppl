
// General POMDP utils

var hasSample = function (x) {return _.has(x,'sample')};

var hasUtilityPriorBelief = function(agentParams){
  if ( _.has(agentParams,'utility') && _.has(agentParams, 'priorBelief') ){
    var utility = agentParams.utility;
    var priorBelief = agentParams.priorBelief;
    return _.isFunction(utility);
  }
  return false;
};

var hasTransitionObserve = function(world){
  if ( _.has(world,'transition') && _.has(world,'observe') ){
    var transition = world.transition;
    var observe = world.observe;
    return _.isFunction(transition) && _.isFunction(observe);
  }
  return false;
};
              


//-----------------------
// Utils for Manifest-latent Optimization

var isPOMDPWithManifestLatent = function(world){
  return hasTransitionObserve(world) && _.has(world,'manifestStateToActions');
}

var stateHasManifestLatent = function (x){return _.has(x,'latentState') && _.isFinite(x.manifestState.timeLeft);};


var buildState = function (manifestState, latentState) {
  return { manifestState:manifestState, latentState:latentState };
};


// From array of POMDP manifest-latent states, extract locations array
var trajectoryToLocations = function(trajectory){
  assert.ok(_.isArray(trajectory));
  return _.map(_.map(trajectory,'manifestState'),'loc');
};


// From array of form [ [loc, action] ], output array of form:
// [  [{manifestState:{loc:, timeLeft:, terminateAfterAction:}, latentState:latentState}, action ]  ]
var stateActionPairsToFullStates = function(locAction, latentState){

  // From array of locs, add *timeLeft* and *terminateAfterAction*
  var locationsToManifestStates = function(locs){
    return map( function(locTime){ 
      var terminateAfterAction = locTime[1]==1;
      return {loc: locTime[0], timeLeft:locTime[1], terminateAfterAction: terminateAfterAction};
  }, zip( locs, downToOne(locs.length) ) );
  };

  var locs = map(first,locAction);  
  var manifestStates = locationsToManifestStates(locs);
  var fullStates = map( function(manifest){
    return buildState(manifest,latentState);
    }, manifestStates);
  
  return zip( fullStates, map(second,locAction) );
};


// TODO remove this and just define locally
var _getPriorBelief = function(perceivedTotalTime, startingLocation, latentStateSampler){
  var startManifestState = {timeLeft: perceivedTotalTime, loc: startingLocation, terminateAfterAction: false};
  
  return Enumerate( function(){
    var latentState = latentStateSampler();
    return buildState(startManifestState, latentState);
  });
};

// TODO remove and define locally
var getPriorBeliefGridworld = function(startManifestState, latentStateSampler){
  return Enumerate( function(){
    var latentState = latentStateSampler();
    return buildState(startManifestState, latentState);
  });
};


// Convenient distributions
var categoricalERP = function(probs, vals) {
  return Enumerate(function(){
    return categorical(probs, vals);
  });
};

