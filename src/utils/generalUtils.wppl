var GridWorld = webpplAgents; // reference to the exports of gridworld-viz.js

// for non-browser use of viz functions
// var viz = webpplAgents;
// var print = function(x){
//   return console.log(JSON.stringify(x));
// };




// General utilities
var extend = function(base, ext){
  return _.extend({}, base, ext);
};

var hasProperties = function(object, listProperties){
  assert.ok( _.isObject(object) && _.isArray(listProperties), 'fail hasProperties');
  return _.all( map( 
    function(property){ 
      return _.has(object, property);
    }, listProperties));
};

var ash = function(){assert.ok(0,'assert halt');};


var reverse = function (xs) { 
  var append = function(n, acc) { return acc.concat(n); } 
  return reduce(append, [], xs);
}

var cumsum = function (xs) {
  var acf = function (n, acc) { return acc.concat( (acc.length > 0 ? acc[acc.length-1] : 0) + n); }
  return reduce(acf, [], reverse(xs));
}

var downToOne = function(n){
  if (n==0){return [];}
  else {return [n].concat(downToOne(n-1));}
};

var arraysEqual = function(xs, ys){
  return JSON.stringify(xs) === JSON.stringify(ys);
};

var argMax = function(f, ar){
  return maxWith(f, ar)[0]
};



// Helpers for displaying Dists
var printDist = function(x,k) {
  var distValues = sort(x.support(), undefined, function(v){return -x.score(v);});
  var distValues = typeof(k)=='undefined' ? distValues : distValues.slice(0,k);
  map(
    function(v){
      var prob = Math.exp(x.score(v));
      if (prob > 0.0){
        console.log(JSON.stringify(v) + ': ' + prob.toFixed(5));
      }
    },
    distValues);
};

var printTopK = function(dist,k){
  var distValues = sort(dist.support(), undefined, function(v){return -dist.score(v);});
  map(
    function(v){
      var prob = Math.exp(dist.score(v));
      if (prob > 0.0){
        console.log(JSON.stringify(v) + ': ' + prob.toFixed(5));
      }
    },
    distValues.slice(0,k));
};

var getMarginalObject = function(dist,key){
  return Infer({ model() {
    var s = sample(dist);
    var keys = _.keys(s);
    var omitKeys = filter(function(el){
      return el !== key;}, keys);
    return _.omit(s,omitKeys);
  }});
};

