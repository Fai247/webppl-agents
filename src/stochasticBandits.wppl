// Stochastic Bandits in the style of IRL bandits


// Multi-arm stochastic bandit POMDP.
// Each arm has one or two prizes it could dispense, each with some probability.
// The latent state stores each arm's ERP over prizes.

// the manifest state location contains the prize gained after the
// previous arm pull

// the agent will observe its prize when it sees the manifest state, so there is
// no need for any observation of the latent state.
var makeStochasticBanditWorld = function(numArms) {
  var actions = _.range(numArms);
  
  var advanceTime = function (manifestState) {
    var newTimeLeft = manifestState.timeLeft - 1;
    var terminateAfterAction = (newTimeLeft === 1);
    return update(manifestState, {timeLeft: newTimeLeft,
  				  terminateAfterAction: terminateAfterAction});
  };
  
  var manifestStateToActions = function (manifestState) {return actions;};

  var transition = function(state, action){
    // figure out what the prize is
    var prize = sample(state.latentState[action]);

    // make the new location the prize, advance the time
    var manifestStateWithPrize = update(state.manifestState, {loc: prize});
    var newManifestState = advanceTime(manifestStateWithPrize);
    
    return buildState( newManifestState, state.latentState);
  };

  var observe = function(state){
    // in beliefAgent, the observation here will be augmented with an 
    // observation of the manifest state, and belief updating will depend on
    // both that full observation and the action the agent took. This is all the
    // agent needs to update, so there is no need to have an observation here.
    // However, if we make the observation 'noObservation', the agent will not
    // update its beliefs, which is bad, so we arbitrarily set the observation
    // to always be 0.

    return 0;
  };
  
  return {manifestStateToActions: manifestStateToActions,
	  transition: transition,
	  observe: observe};
};

var buildStochasticBanditStartState = function(timeLeft, latent) {
  return {manifestState: {loc: 'start',
			  timeLeft: timeLeft,
			  terminateAfterAction: false},
	  latentState: latent};
};

// take a table of the form {start: 0, chocolate: 10, wine: -20} and return a
// utility function
var makeStochasticBanditUtility = function(table) {
  return function(state, action) {
    var prize = state.manifestState.loc;
    return table[prize];
  };
};
