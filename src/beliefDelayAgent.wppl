// BELIEF DELAY AGENT

// Test script by running:
//webppl beliefDelayAgent/irlBanditTests.wppl --require webppl-timeit --require webppl-dp --require .


// Helper functions for testing argument types (warning: heuristics only)

var isGreaterZero = function (x) {return _.isFinite(x) && x > 0;};
var isERP = function (x) {return hasProperties(x,['sample', 'support']);};
var isState = function (x) {x.hasOwnProperty('latentState') && _.isFinite(x.manifestState.timeLeft);};
var isGridworld = function(world){return arraysEqual(world.actions, ['l', 'r', 'u', 'd']);};


var isWorld = function(world){ hasProperties(world, ['transition', 'manifestStateToActions', 'observe']);};

var inSupport = function(x, erp){return _.isFinite( erp.score([], x) ); };
                   

// Helper functions

var buildState = function (manifestState, latentState) {
  return { manifestState:manifestState, latentState:latentState };
};

var downToOne = function(n){
  if (n==0){return [];}
  else {return [n].concat(downToOne(n-1));}
};

// From array of POMDP states, extract locations array
var trajectoryToLocations = function(trajectory){
  assert.ok(_.isArray(trajectory) && isState(trajectory[0]), 'trajectory to locations args');
  return _.pluck( _.pluck(trajectory,'manifestState'), 'loc' );
};

// From array of locs, add *timeLeft* and *dead*
var locationsToManifestStates = function(locs){
  return map( function(locTime){ 
    var dead = locTime[1]==1;
    return {loc: locTime[0], timeLeft:locTime[1], dead: dead};
  }, zip( locs, downToOne(locs.length) ) );
};

// From array of form [ [loc, action] ], output array of form:
// [  [{manifestState:{loc:, timeLeft:, dead:}, latentState:latentState}, action ]  ]
var stateActionPairsToFullStates = function(locAction, latentState){
  var locs = map(first,locAction);
  var manifestStates = locationsToManifestStates(locs);
  var fullStates = map( function(manifest){
    return buildState(manifest,latentState);
    }, manifestStates);
  
  return zip( fullStates, map(second,locAction) );
};


// Example of well-formed *params* argument for makeBeliefDelayAgent.
// See more examples in ../beliefDelayAgent/irlBanditTests.wppl
var exampleMakeAgentParams = {
  alpha: 100,
  noDelays: false,
  discount: 2,
  sophisticatedOrNaive: 'sophisticated',
  myopia: {on:false, bound:0},
  priorBelief: Enumerate(function(){return flip() ? 'latentA' : 'latentB';}),
  boundVOI: {on:false, bound:0}
};


var makeBeliefDelayAgent = function (params, world){

  // Check on correctness of *params* and *world*
  assert.ok( hasProperties(params, ['utility','alpha','discount','sophisticatedOrNaive', 
                                    'priorBelief', 'noDelays', 'myopia', 'boundVOI']), 
             'makeBeliefDelayAgent args');
  assert.ok( isWorld(world), 'makeBeliefDelay world is not world' );
  
  assert.ok( params.myopia.on === false || params.boundVOI.on === false, "one of myopia and boundVOI must be false");
  if (params.myopia.on || params.boundVOI.on){
    assert.ok( params.noDelays === false && params.sophisticatedOrNaive=== 'naive', 
    'myopia and boundVOI require Naive agent with delays');
  }

  // Variables for methods
  var utility = params.utility;
  var manifestStateToActions = world.manifestStateToActions;
  var transition = world.transition;
  var observe = world.observe;
  

  // Update the *delay* parameter in *expectedUtility* for sampling actions and future utilities
  var transformDelay = function(delay){
    var table = {naive: delay + 1, sophisticated: 0 };
    return params.noDelays ? 0 : table[params.sophisticatedOrNaive];
  };
  
  var incrementDelay = function(delay){
    return params.noDelays ? 0 : delay + 1;
  };

  // Termination condition for *expectedUtility*
  var shouldTerminate = function(state, delay) {
    if (state.manifestState.dead) {
      return true;
    }
    if (params.myopia.on) {
      return delay >= params.myopia.bound;
    }
    return false;
  }

  
  // *belief* is ERP on latent states, returns posterior ERP on latent states
  var updateBelief = dp.cache(
    function (manifestState, belief, observation, delay) {
      if (params.boundVOI.on && (delay >= params.boundVOI.bound)){
        return belief;
      } else {
        return Enumerate(function () {
          var latentState = sample(belief);
          var state = buildState(manifestState, latentState);
          condition(_.isEqual(observe(state), observation));
          return latentState;
      });
      }
    });

  
  var act = dp.cache(
    function (manifestState, belief, delay) {
      assert.ok(isGreaterZero(manifestState.timeLeft) && isERP(belief) && _.isFinite(delay), 'act arguments error' + 
                'act: manifestState, belief, delay' + JSON.stringify([manifestState, belief, delay]));
      
      return Enumerate(function () {
        var action = uniformDraw(manifestStateToActions(manifestState));
        var eu = expectedUtility(manifestState, belief, action, delay);
        factor(params.alpha * eu);
        return action;
      });
    });

  var expectedUtility = dp.cache(
    function (manifestState, belief, action, delay) {
      return expectation(
        Enumerate(function () {
          var latentState = sample(belief);
          var state = buildState(manifestState, latentState);
          var u = 1.0 / (1 + params.discount * delay) * utility(state, action);
          if (shouldTerminate(state, delay)){
            return u;
          } else {
            // Change state and get observation based on *latentState*
            var nextState = transition(state, action);
            var nextObservation = observe(nextState);

            // Update agent's internal state based on new manifestState, the observation, old belief, old delay.
            var transformedDelay = transformDelay(delay);
            var nextBelief = updateBelief(nextState.manifestState, belief, nextObservation, transformedDelay);
            var nextAction = sample(act(nextState.manifestState, nextBelief, transformedDelay));

            // Compute utility given agent's new internal belief state, the new manifestState, and agent's action. 
            var futureU = expectedUtility(nextState.manifestState,nextBelief,nextAction,incrementDelay(delay));
            return u + futureU;
          }
        }));
    });

  return { act:act, updateBelief:updateBelief, expectedUtility : expectedUtility, params: params};
};

var simulateBeliefDelayAgent = function (startState, world, agent, actualTotalTime, outputType) {
  var perceivedTotalTime = startState.manifestState.timeLeft;
  assert.ok( actualTotalTime <= perceivedTotalTime && isState(startState), 'simulateBeliefDelayAgent args');
  assert.ok( perceivedTotalTime  > 1, 'perceivedTime<=1. If=1 then should have state.dead, but then simulate wont work');

  var agentAct = agent.act;
  var agentUpdateBelief = agent.updateBelief;
  var priorBelief = agent.params.priorBelief;
  var transition = world.transition;
  var observe = world.observe;
  
  var selectOutput = function(state, nextAction, currentBelief){
    var table =  {states:state, actions:nextAction.action, stateAction:[state, nextAction.action], 
                  stateBelief: [state, currentBelief]};
    assert.ok( _.has(table,outputType), "outputType key not in ['states', 'actions', 'stateAction', 'stateBelief']");
    return table[outputType];
  };

  // TODO: can we switch to just the gridworld case?
  var shouldTerminate = (isGridworld(world) ?
                         function (actualTimeLeft, state) { return actualTimeLeft === 0 || state.dead; } :
                         function (actualTimeLeft, state) { return actualTimeLeft === 0; });


  var sampleSequence = function(state, belief, actualTimeLeft) {
    if (shouldTerminate(actualTimeLeft, state.manifestState) ) {
      return [];
    } else {
      var nextObservation = observe(state);

      // Update agent's internal state and get action
      var delay = 0;
      var nextBelief = agentUpdateBelief(state.manifestState, belief, nextObservation, delay);
      var nextAction = sample(agentAct(state.manifestState, nextBelief, delay));  

      // Update world state and return output and output from recursing on updated world state, internal state, and time. 
      var nextState = transition(state, nextAction);
      var output = selectOutput(state, nextAction, belief);
      return [output].concat(sampleSequence(nextState, nextBelief, actualTimeLeft - 1));
    }
  };
  return sampleSequence(startState, priorBelief, actualTotalTime);
};




// TODO REWRITE EXP UTILITY IF IT NEEDS IT?

// Run *simulate*. Then use *expectedUtility* to compute the expected
// utilities of each state along the trajectory. Do this from the
// perspective of each timestep. For discounting agents, the expected
// utilities for the same state/timeLeft will change depending on how
// close the agent is to the state (as measured by *delay*).

var getExpectedUtilitiesBeliefDelayAgent = function (startState, world, agent, actualTotalTime){
  assert.ok( !agent.params.noDelays, 'Delays switched off. This function uses variation in delays.');
  
  var trajectory = simulateBeliefDelayAgent(startState, world, agent, actualTotalTime, 'stateBelief');
  
  var expectedUtility = agent.expectedUtility;
  var stateToActions = world.manifestStateToActions;

  
  var getExpectedUtilityFromTimestep = function(t){
    var trajectoryAfterT = trajectory.slice(t, trajectory.length);
    var len = trajectoryAfterT.length;
    
    return map(function(stateBelief){
      var manifestState = stateBelief[0].manifestState;
      var belief = stateBelief[1];
      var timeLeft = manifestState.timeLeft;
      var delay = len - timeLeft;
      
      return [stateBelief[0], 
              map(function(a){
                return expectedUtility(manifestState, belief, a, delay);
              }, stateToActions(manifestState))
             ];
    }, trajectoryAfterT);
  };

  var expectedUtilities = map(getExpectedUtilityFromTimestep, _.range(trajectory.length));

  return {trajectory: trajectory, expectedUtilities: expectedUtilities};
  
};


// Helper functions to display outputs of *simulate* and *getExpectedUtilities*
var displayTrajectory = function ( trajectory ) {
  console.log('trajectory (locations only)',
              map( function (state) {return state.manifestState.loc;}, trajectory) );
};

var displayExpectedUtilities = function(timeToEUs){
  map( function(EUs){
    console.log('\n\n Next timestep: ');
    map(function(s){console.log(s[0].manifestState.loc, s[1]);}, EUs);
  }, timeToEUs);
};
