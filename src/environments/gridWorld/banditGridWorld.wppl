// a 'bandit gridworld' is a gridworld POMDP where all restaurants are open,
// but the agent doesn't know the quality of the food. The manifest states are
// the same as the states of gridworld MDPs, and the latent state is an object
// associating restaurant names to the quality of food of that chain (which is
// assumed to be the agent's utility). When an agent is next to a restaurant, it
// observes the food quality of that chain (perhaps by looking through the
// window and seeing how much the patrons like their food).

// since the structure of bandit gridworld is so similar to that of a gridworld
// pomdp, we can just use that, and only update the transition function and
// manifestStateToActions (since we don't need to worry about transitioning
// into restaurants that are closed)

var makeBanditGridworld = function(gridworld) {
  var gridworldPOMDP = makeGridworldPOMDP(gridworld);

  var mdpTransition = gridworld.transition;
  var transition = function(state, action) {
    assert.ok(isPOMDPState(state), 'transition state arg');
    // transition the manifest state as it would be transitioned in the gridworld
    // mdp, leave the latent state alone
    var newManifestState = mdpTransition(state.manifestState, action);
    return buildState(newManifestState, state.latentState);
  };

  var manifestStateToActions = gridworld.stateToActions;

  return update(gridworldPOMDP,
		{transition: transition,
		 manifestStateToActions: manifestStateToActions});

};

var makeBanditGridworldUtility = function(feature, timeCost) {
  return function(state, action) {
    var stateFeatureName = feature(state.manifestState).name;
    if (stateFeatureName) {
      return state.latentState[stateFeatureName];
    } else {
      return timeCost;
    }
  };
};





var makeRestaurantSearchMDP = function(options_) { 
  var A = {name: 'A'};
  var B = {name: 'B'};
  var C = {name: 'C'};
  var D = {name: 'D'};
  var E = {name: 'E'};

  var options = options_ || {};

  var features =
	[['#', ' ', ' ', '#'],
	 [ C , ' ', ' ', '#'],
	 ['#', ' ', '#', '#'],
	 ['#', ' ',  B , '#'],
	 [ A , ' ', '#', '#'],
	 ['#', ' ', '#',  D ],
	 ['#', ' ', ' ', ' '],
	 ['#', '#', '#',  E ]];

  var options = update(options, {gridFeatures: features});
  return makeGridWorld(options).world;
};

// start state for restaurant search pomdp
var restaurantSearchStartState =
      {manifestState: {loc: [1, 2],
		       timeLeft: 17,
		       terminateAfterAction: false},
       latentState: {A: 3, B: 3, C: 4, D: 5, E: 0}};


var makeRestaurantSearchPOMDP = function(){
  var gridworld = makeRestaurantSearchMDP({noReverse: true});
  var world = makeBanditGridworld(gridworld);
  var startState = restaurantSearchStartState;

  var feature = world.feature;
  var makeUtility = function(timeCost){
    return makeBanditGridworldUtility(feature, timeCost);
  };
                                       
  return {mdp:gridworld, world:world, startState:startState, makeUtility: makeUtility};
};

