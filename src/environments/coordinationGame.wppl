// home-club game:
// there are two agents. The agents are in general antisocial, and like being
// home alone, but especially enjoy hanging out with each other. They both
// separately face a choice of staying home alone or going out to a club. If
// an agent stays at home, they get a utility of 5. If they go to the club,
// and the other agent is there, they get a utility of 10, and otherwise they
// get a utility of 0.

var makeHomeClubGame = function(){

  var locs = ['start', ['club', 'home'], ['home', 'home'], ['club', 'club'],
	      ['home', 'club']];

  var actions = ['home', 'club'];

  var transition = function(state, action0, action1){
    var loc = state.loc;
    if (loc !== 'start') {
      return {loc: loc,
	      terminateAfterAction: true};
    } else {
      return {loc: [action0, action1],
	      terminateAfterAction: false};
    }
  };
  
  return {
    actions0: actions,
    actions1: actions,
    transition: transition
  };
};

var homeClubUtility0 = function(state) {
  var loc = state.loc;
  if (loc === 'start') {
    return 0;
  } else if (loc[0] === 'home') {
    return 5;
  } else {
    return loc[1] === 'home' ? 0 : 10;
  };
};

var homeClubUtility1 = function(state) {
  var loc = state.loc;
  if (loc === 'start') {
    return 0;
  } else if (loc[1] === 'home') {
    return 5;
  } else {
    return loc[0] === 'home' ? 0 : 10;
  };
};

// doubleClub game:
// each agent has to choose between two clubs. One club is slightly better.
// Both agents prefer the better club (all else being equal), and they also
// greatly prefer to be in the same club as the other agent.

var makeDoubleClubGame = function(){

  var locs = ['start', ['mooseheads', 'cube'], ['cube', 'cube'],
	      ['mooseheads', 'mooseheads'], ['cube', 'mooseheads']];

  var actions = ['cube', 'mooseheads'];

  var transition = function(state, action0, action1){
    var loc = state.loc;
    if (loc !== 'start') {
      return {loc: loc,
	      terminateAfterAction: true};
    } else {
      return {loc: [action0, action1],
	      terminateAfterAction: false};
    }
  };
  
  return {
    actions0: actions,
    actions1: actions,
    transition: transition
  };
};

var doubleClubUtility0 = function(state) {
  var loc = state.loc;
  if (loc === 'start') {
    return 0;
  } else {
    var clubUtility = loc[0] === 'cube' ? 0.001 : 0;
    var matchingUtility = loc[0] === loc[1] ? 1 : 0;
    return clubUtility + matchingUtility;
  }
};

var doubleClubUtility1 = function(state) {
  var loc = state.loc;
  if (loc === 'start') {
    return 0;
  } else {
    var clubUtility = loc[1] === 'cube' ? 0.001 : 0;
    var matchingUtility = loc[0] === loc[1] ? 1 : 0;
    return clubUtility + matchingUtility;
  }
};
