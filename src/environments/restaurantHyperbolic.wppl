var getRestaurantHyperbolicInfer = function(){

  var getObservations = function(world, start, pathName){
    
    var temptationUtility = makeRestaurantUtilityFunction(world, {
      'Donut N' : [10, -10],
      'Donut S' : [10, -10],
      'Veg'   : [-10, 20], // [-10,25] makes soph work on where reverse allowed
      'Noodle': [-5, -5],
      'timeCost': -.01
    });
    
    var discount = pathName=='vegDirect' ? 0 : 1;
    var sophisticatedOrNaive = pathName=='naive' ? 'naive' : 'sophisticated';
    
    var agent = makeHyperbolicDiscounter(
      { utility : temptationUtility,
        alpha : 500, 
        discount : discount, 
        sophisticatedOrNaive  : sophisticatedOrNaive
      }, world);
    var observedStateAction = simulateHyperbolic(start, world, agent);
    var observedLocs = getLocationsHyperbolic(observedStateAction);   
    // assert.ok( _.isEqual( observedLocs, restaurantNameToPath[pathName]), 'generated locs: ' + observedLocs + ' \n stored locs: 
// ' + restaurantNameToPath[pathName]);
    return observedStateAction;
  };


  
  var factorSequence = function(agentAction, observedStateAction){
    map(function (stateAction) {
      var state   = stateAction[0];
      var action  = stateAction[1];
      factor(agentAction(state, 0).score([], action)) ; 
    }, observedStateAction);
  };

  
  // Could split up like this
  // var hyperbolicFactor = function(agentParams, world, observedStateAction){
  //   var agent = makeHyperbolicDiscounter(
  //       { utility   : makeRestaurantUtilityFunction(world, utilityTable),
  //         alpha     : alpha, 
  //         discount  : discounting.discount, 
  //         sophisticatedOrNaive : discounting.sophisticatedOrNaive
  //       }, world);
  //   var agentAction = agent.act;
      
  //   factorSequence(agentAction, observedStateAction);
  // };

 
  
  var getPosterior = function(world, prior, observedStateAction, repeatObservations){
    var Infer = Enumerate;

    var priorUtilityTable = prior.utility;
    var priorDiscounting = prior.discounting;
    var priorAlpha = prior.alpha;
    
    return Infer(function () {
      var utilityTable = priorUtilityTable();
      var discounting = priorDiscounting();
      var alpha = priorAlpha();
      
      var agent = makeHyperbolicDiscounter(
        { utility   : makeRestaurantUtilityFunction(world, utilityTable),
          alpha     : alpha, 
          discount  : discounting.discount, 
          sophisticatedOrNaive : discounting.sophisticatedOrNaive
        }, world);
      var agentAction = agent.act;
      
      factorSequence(agentAction, observedStateAction);

      if (! _.isUndefined(repeatObservations) ){ 
        repeat(repeatObservations, function(){factorSequence(agentAction, observedStateAction);});
      }
      

      var vegMinusDonut = sum(utilityTable['Veg']) - sum(utilityTable['Donut N']);
      var donutNGreaterDonutS = sum(utilityTable['Donut S']) < sum(utilityTable['Donut N']);

      var dis = function(d){return 1/(1+discounting.discount*d);};
      var disUDonut = function(d){
        return dis(d)*utilityTable['Donut N'][0] + dis(d+1)*utilityTable['Donut N'][1];
      };
      var disUVeg = function(d){
        return dis(d)*utilityTable['Veg'][0] + dis(d+1)*utilityTable['Veg'][1];
      };
      var donutTempting = (disUDonut(4) < disUVeg(6)) && (disUDonut(0) > disUVeg(2));
      
      return {utility: utilityTable, 
              discount: discounting.discount, 
              alpha: alpha,
              sophisticatedOrNaive: discounting.sophisticatedOrNaive,
              vegMinusDonut: vegMinusDonut,
              donutNGreaterDonutS: donutNGreaterDonutS,
              timeCost: utilityTable.timeCost,
              donutTempting: donutTempting
             };
    });
  };

  return {getObservations: getObservations, getPosterior: getPosterior};
};

