

var makeProcrastinationMDP = function(deadlineTime) {
  var stateLocs = ["wait_state", "reward_state"];
  var actions = ["wait", "work", "relax"];

  var stateToActions = function(state) {
    return state.loc === "wait_state" ? ["wait", "work"]
      : ["relax"];
  };

  var advanceTime = function (state) {
    var newTimeLeft = state.timeLeft - 1;
    var terminateAfterAction = (newTimeLeft === 1 || state.loc === "reward_state");
    return extend(state, {timeLeft: newTimeLeft,
  			  terminateAfterAction: terminateAfterAction});
  };

  var transition = function(state, action) {
    assert.ok(_.contains(stateLocs, state.loc) && _.contains(actions, action), 'procrastinate transition:' + [state.loc,action]);
    
    if (state.loc === "reward_state") {
      return advanceTime(state);
    } else if (action === "wait") {
      var waitSteps = state.waitSteps + 1;
      return extend(advanceTime(state), {waitSteps: waitSteps});
    } else {
      var newState = extend(state, {loc: "reward_state"});
      return advanceTime(newState);
    }
  };

  var feature = function(state) {
    return state.loc;
  };

  var startState = {loc: "wait_state",
		    waitSteps: 0,
		    timeLeft: deadlineTime,
		    terminateAfterAction: false};

  return {actions: actions,
	  stateToActions: stateToActions,
	  transition: transition,
	  feature: feature,
          startState: startState};
};


var makeProcrastinationUtility = function(utilityTable) {
  assert.ok(hasProperties(utilityTable, ['waitCost', 'workCost',
					 'reward']), 'makeProcrastinationUtility args');
  var waitCost = utilityTable.waitCost;
  var workCost = utilityTable.workCost;
  var reward = utilityTable.reward;

  // NB: you receive the *workCost* when you leave the *wait_state*
  // You then receive the reward when leaving the *reward_state* state
  return function(state, action) {
    if (state.loc === "reward_state") {
      return reward + state.waitSteps * waitCost;
    } else if (action === "work") {
      return workCost;
    } else {
      return 0;
    }
  };
};

var workInMiddle10 = [[{"loc":"wait_state","waitSteps":0,"timeLeft":10,"terminateAfterAction":false},"wait"],[{"loc":"wait_state","waitSteps":1,"timeLeft":9,"terminateAfterAction":false},"wait"],[{"loc":"wait_state","waitSteps":2,"timeLeft":8,"terminateAfterAction":false},"wait"],[{"loc":"wait_state","waitSteps":3,"timeLeft":7,"terminateAfterAction":false},"work"],[{"loc":"reward_state","waitSteps":3,"timeLeft":6,"terminateAfterAction":true},"relax"]];


