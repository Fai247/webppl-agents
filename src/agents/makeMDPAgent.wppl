// functions involving an agent in a plain gridworld MDP.

var makeMDPAgent = function(params, world) {
  // *params* should be an object containing *utility*, a utility function, and
  // *alpha*, which regulates the agent's softmax noise.
  map(function(s){assert.ok(params.hasOwnProperty(s),'makeMDPAgent args');}, 
      ['utility','alpha']);
  
  var stateToActions = world.stateToActions;
  var transition = world.transition;
  var utility = params.utility;
  var alpha = params.alpha;

  var act = dp.cache( 
    function(state){
      return Enumerate(function(){
        var action = uniformDraw(stateToActions(state));
        var eu = expectedUtility(state, action);
        factor(alpha * eu);
        return action;
      });      
    });
  
  var expectedUtility = dp.cache(
    function(state, action){
      var u = utility(state, action);
      if (state.terminateAfterAction){
        return u; 
      } else {                     
        return u + expectation( Enumerate(function(){
          var nextState = transition(state, action); 
          var nextAction = sample(act(nextState));
          return expectedUtility(nextState, nextAction);  
        }));
      }                      
    });
  
  return {
    params : params,
    expectedUtility : expectedUtility,
    act: act
  };
};

var simulateMDPAgent = function(startState, world, agent, outputType) {
  // if outputType is undefined, default to stateAction
  var act = agent.act;
  var transition = world.transition;
  var outputType = outputType ? outputType : 'states';

  var selectOutput = function(state, action) {
    var table = {states: state,
		 actions: action,
		 stateAction: [state, action]};
    return table[outputType];
  };

  var sampleSequence = function(state) {
    var action = sample(act(state));
    var nextState = transition(state, action);
    var out = selectOutput(state, action);
    return state.terminateAfterAction ? [out]
      : [out].concat(sampleSequence(nextState));
  };
  return sampleSequence(startState);
};

// TODO remove
var simulateMDP = simulateMDPAgent;


// *trajectory* must be a trajectory of states
var getExpectedUtilitiesMDP = function(stateTrajectory, world, agent) {
  var stateToActions = world.stateToActions;
  var eu = agent.expectedUtility;
  var getAllExpectedUtilities = function(state) {
    var availableActions = stateToActions(state);
    return [state, map(function(action){return eu(state, action);},
		       availableActions)];
  };
  return map(getAllExpectedUtilities, stateTrajectory);
};
