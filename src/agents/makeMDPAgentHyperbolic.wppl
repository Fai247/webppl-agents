
// TODO makeHyperbolicAgent rename

var makeHyperbolicDiscounter = function (params, world) {
  assert.ok(hasProperties(params, ['utility','alpha','discount','sophisticatedOrNaive']), 'makeMDPAgentHyperbolic params');
  
  var stateToActions = world.stateToActions;
  var transition = world.transition;
  var utility = params.utility;

  // we can specify a discount function so that our 'hyperbolic' agent can
  // actually be an exponential discounter (or some other kind of discounter)
  var paramsDiscountFunction = params.discountFunction;

  var discountFunction = paramsDiscountFunction ? paramsDiscountFunction
	: function(delay){
	  return 1/(1 + params.discount*delay);
	};

  var isNaive = params.sophisticatedOrNaive=='naive';
    
  var act = dp.cache( 
    function(state, delay){
      var delay = delay ? delay : 0; //make sure delay is never 'undefined'

      return Enumerate(function(){
        var action = uniformDraw(stateToActions(state));
        var eu = expectedUtility(state, action, delay);
        factor(params.alpha * eu);
        return action;
      });      
    });
  
  var expectedUtility = dp.cache(
    function(state, action, delay){
      var u = discountFunction(delay) * utility(state, action);
      assert.ok(!_.isUndefined(u),
                "utility undefined" + JSON.stringify([state, action, delay, utility(state, action)]));
      assert.ok(!_.isNaN(u), "discounted utility not a number" + JSON.stringify([state, action, delay, utility(state, action)]));
      if (state.terminateAfterAction){
        return u; 
      } else {                     
        return u + expectation( Enumerate(function(){
          var nextState = transition(state, action); 
          var perceivedDelay = isNaive ? delay + 1 : 0;
          var nextAction = sample(act(nextState, perceivedDelay));
          return expectedUtility(nextState, nextAction, delay+1);  
        }));
      }                      
    });
  
  return {
    params : params,
    expectedUtility : expectedUtility,
    act: act
  };
};

var simulateHyperbolic = function(startState, world, agent, outputType) {
  var act = agent.act;
  var expectedUtility = agent.expectedUtility;
  var transition = world.transition;

  var selectOutput = function(state, action){
    var table =  {states:state, actions:action, stateAction:[state, action]};
    return outputType ? table[outputType] : [state, action];
  };

  
  var sampleSequence = function (state) {
    var delay = 0;
    var action = sample(act(state, delay));
    var nextState = transition(state, action); 
    var out = selectOutput(state, action);
    return state.terminateAfterAction ?
      [out] : [out].concat(sampleSequence(nextState));
  };
  return sampleSequence(startState);
};



var MAPActionPath = function(state, world, agent, actualTotalTime, statesOrActions) { 
  var perceivedTotalTime = state.timeLeft;
  assert.ok( perceivedTotalTime  > 1 || state.terminateAfterAction==false, 'perceivedTime<=1. If=1 then should have state.terminateAfterAction, but then simulate wont work ' + JSON.stringify(state));

  var agentAction = agent.act;
  var expectedUtility = agent.expectedUtility;
  var transition = world.transition;

  var sampleSequence = function (state, actualTimeLeft) {
      var action = agentAction(state, actualTotalTime-actualTimeLeft).MAP().val;
      var nextState = transition(state, action); 
      var out = {states:state, actions:action, both:[state,action]}[statesOrActions];
    if (actualTimeLeft==0 || state.terminateAfterAction){
      return [out];
    } else {
      return [ out ].concat( sampleSequence(nextState, actualTimeLeft-1));
    }
  };
  return sampleSequence(state, actualTotalTime);
};


var plannedTrajectory = function(world, agent) {

  var getExpectedUtilities = function(trajectory, agent, actions) { 
    var expectedUtility = agent.expectedUtility;
    
    var v = mapIndexed(function(i, state) {
      return [state, map(function (a) { return  expectedUtility(state, a, i); }, actions)];
    }, trajectory );

    return v;
  };
  
  return function(state) {
    var currentPlan = MAPActionPath(state, world, agent, state.timeLeft, 'states');
    return getExpectedUtilities(currentPlan, agent, world.actions);
  };
} 

var plannedTrajectories = function(trajectory, world, agent) { 
  var getTrajectory = plannedTrajectory(world, agent);
  return map(getTrajectory, trajectory);
}
