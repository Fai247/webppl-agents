// note: this probably won't work due to strange properties of bounded VOI
// agents when not using the version of *makeBeliefDelayAgent* on the trueLatent
// branch

// we see the agent go up to veg. We know that the agent prefers noodle, so they
// must think that it's unlikely that noodle is open. However, it would still be
// positive VOI to check donut North, which is open iff noodle is. Therefore,
// the agent must have bounded VOI.

var gridworldMDP = makeDonutWorld2({big: true});
var gridworldPOMDP = makeGridworldPOMDP(gridworldMDP);
var feature = gridworldMDP.feature;
var transition = gridworldPOMDP.transition;
var observe = gridworldPOMDP.observe;


// here, we define a table giving the agent's true utility function
// (inference will know this)

var trueUtilityTable = { Donut: 0,
			 Veg: 1,
			 Noodle: 5,
			 timeCost: -0.01 };

var tableToUtilityFunction = function(table) {
  return function(state, action) {
    if (state.manifestState.dead) {
      return 0;
    }
    var stateFeatureName = feature(state.manifestState).name;
    if (stateFeatureName) {
      return table[stateFeatureName];
    } else {
      return table.timeCost;
    }
  };
};

// we start the agent off in the north-east corner 
var startState = {manifestState: {loc: [5,6],
				  dead: false,
				  timeLeft: 10,
				  digest: 0},
		  latentState: {Donut: true,
				Veg: true,
				Noodle: true}};

// we define some beliefs that the agent could have
var informedBelief = deltaERP(startState.latentState);
var noodleClosedBelief = Enumerate(function(){
  return categorical([0.15, 0.85], [startState.latentState, {Donut: false,
							     Veg: true,
							     Noodle: false}]);
});

// making the agent
var params = {
  alpha: 100,
  noDelays: false,
  discount: 0,
  sophisticatedOrNaive: 'naive',
  myopia: {on: false, bound: 0}, 
  priorBelief: noodleClosedBelief,
  boundVOI: {on: true, bound: 1},
  utility: tableToUtilityFunction(trueUtilityTable)
};
var agent = makeBeliefDelayAgent(params, gridworldPOMDP);

// generating the agent's trajectory
var observedTrajectory = simulateBeliefDelayAgent(startState, gridworldPOMDP,
						  // agent, 10, 'stateAction');
						  agent, 10, 'states');
// (visualise trajectory in codebox)
console.log(JSON.stringify(_.pluck(_.pluck(observedTrajectory, 'manifestState'), 'loc')));
