// here, we observe the agent in a gridworld, going past a nearby donut shop
// and towards a further away donut shop. we can conclude that the agent likes
// donuts, but thinks that the nearby donut shop is closed.

// assume that the agent is not a discounter, does not have bounded VOI, etc

var tableToUtilityFunction = function(table, feature ) {
  
  return function(state, action) {
    if (state.manifestState.terminateAfterAction) {
      return 0;
    }
    
    var stateFeatureName = feature(state.manifestState).name;
    
    if (stateFeatureName) {
      
      return table[stateFeatureName];
    } else {
      return table.timeCost;
    }
  };
};

// TODO should timeAtRestaurant be 0 or 1?
var getStartState = function(startingLocation, perceivedTotalTime, latentState){
  return buildState({loc: startingLocation,
		     terminateAfterAction: false,
		     timeLeft: perceivedTotalTime,
		     timeAtRestaurant: 0},
	            latentState);
};


var allOpenLatentState = {
  'Donut N': true,
  'Donut S': true,
  'Veg': true,
  'Noodle': true
};

var onlyDonutSouthClosedLatentState = {
  'Donut N': true,
  'Donut S': false,
  'Veg': true,
  'Noodle': true
};

// Make big gridworld
var gridworldMDP = makeDonutWorld2({big: true});
var gridworldPOMDP = makeGridworldPOMDP(gridworldMDP);
var feature = gridworldMDP.feature;

var transition = gridworldPOMDP.transition;
var worldObserve = gridworldPOMDP.observe;
var observe = worldObserve // TODO CHANGE BACK getFullObserve(worldObserve);

// Time, start location, true latent state and full start state
var perceivedTotalTime = 10;
var startingLocation = [2,1];
var trueLatentState = allOpenLatentState;
var startState = getStartState(startingLocation, perceivedTotalTime, trueLatentState);

// define tables listing the utility of each restaurant, and a function
// that converts these tables into utility functions.

var donutUtilityTable = {'Donut N': 5,
			 'Donut S': 5,
			 'Veg': 1,
			 'Noodle': 1,
			 'timeCost': -0.1};
 
var vegUtilityTable = {'Donut N': 1,
		       'Donut S': 1,
		       'Veg': 10,
		       'Noodle': 1,
		       'timeCost': -0.1};


// agent's true prior and alternative hypothesis about agent's prior

var uninformedLatentStateSampler = function(){
  return flip(.8) ? onlyDonutSouthClosedLatentState : trueLatentState;
};

var truePriorBelief = _getPriorBelief(perceivedTotalTime, startingLocation, 
                                      uninformedLatentStateSampler);
var alternativePriorBelief = _getPriorBelief(perceivedTotalTime, startingLocation,
                                             function(){return trueLatentState;});

// true agent (which we build to simulate trajectory)
var baseParams = {
  priorBelief: null,
  utility: null,
  alpha: 100,
  noDelays: true,
  discount: 0,
  sophisticatedOrNaive: 'sophisticated',
  myopia: {on: false, bound: 0},
  boundVOI: {on: false, bound: 0},
};
var params = update(baseParams, 
                    {priorBelief: truePriorBelief,
                     utility: tableToUtilityFunction(donutUtilityTable, feature)});

var beliefOrBeliefDelay = 'beliefDelay';
var makeAgent  = getMakeAgentFunction(beliefOrBeliefDelay);
var simulate = getSimulateFunction(beliefOrBeliefDelay);
var agent = makeAgent(params, gridworldPOMDP);

var observedTrajectory = simulate(startState, gridworldPOMDP, agent, perceivedTotalTime, 'stateAction');

// helper function for inference
var factorAlongTrajectory = function(index, trajectory, agent, belief){
  if (index >= trajectory.length) {
    return [];
  } else {

    var agentAct = agent.act;
    var agentUpdateBelief = agent.updateBelief;
    
    var state = trajectory[index][0];
    var observedAction = trajectory[index][1];

    var observation = observe(state);
    var nextBelief = agentUpdateBelief(state.manifestState, belief, observation, 0);
    var nextActionERP = agentAct(state.manifestState, nextBelief, 0);

    factor(nextActionERP.score([], observedAction));
    
    return factorAlongTrajectory(index + 1, trajectory, agent, nextBelief);
  }
};

var priorUtilityTable = uniformDraw([donutUtilityTable, vegUtilityTable]);

// the inference itself
var getPosterior = function(priorUtilityTable, priorAgentPrior) {
  return printERP(Enumerate(function(){
    var alpha = 100;
    
    var utilityTable = priorUtilityTable();
    var utility = tableToUtilityFunction(utilityTable, feature);
    var agentPrior = uniformDraw([truePriorBelief, alternativePriorBelief]);

    var isMyopic = false;
    var myopiaBound = 0;

    var hasBoundVOI =  false;
    var voiBound = 0;

    var discount = 0;
    var noDelays = true;

    var sophisticatedOrNaive = 'sophisticated';

    var params = {
      alpha: alpha,
      utility: utility,
      noDelays: noDelays,
      discount: discount,
      sophisticatedOrNaive: sophisticatedOrNaive,
      myopia: {on: isMyopic, bound: myopiaBound},
      priorBelief: agentPrior,
      boundVOI: {on: hasBoundVOI, bound: voiBound}
    };
    
    var agent = makeAgent(params, gridworldPOMDP);
    console.log('obs', observedTrajectory[0]);

    factorAlongTrajectory(0, observedTrajectory, agent, agentPrior);

    return {utilityTable: utilityTable,
	    agentPrior: agentPrior};
  }));
};

timeit(agentPosterior);
