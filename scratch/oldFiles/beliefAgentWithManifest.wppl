// TODO: port refactoring of beliefDelayAgent?

// POMDP AGENT WITHOUT DELAYS
// basically the same as makeBeliefDelayAgent without delays or discounting

var makeBeliefAgent = function(params, world) {
  map(function(s){assert.ok(params.hasOwnProperty(s),'makeBeliefAgent args');}, 
      ['utility','alpha', 'priorBelief']);
  assert.ok( isPOMDPWorld(world),
	     'world argument lacks transition, stateToActions, or observe');

  var utility = params.utility;
  var manifestStateToActions = world.manifestStateToActions;
  var transition = world.transition;
  var observe = world.observe;

  // *belief* is Dist on latent states, returns posterior Dist on latent states
  var updateBelief = dp.cache(
    function(manifestState, belief, observation){
      return observation === 'noObservation' ? belief :
	Infer({ method: 'enumerate' }, function(){
	  var latentState = sample(belief);
	  var state = buildState(manifestState, latentState);
	  condition(_.isEqual(observe(state), observation));
	  return latentState;
	});
    });

  var act = dp.cache(
    function(manifestState, belief) {
      assert.ok(isGreaterZero(manifestState.timeLeft) && isDist(belief),
		'agent args fail');

      return Infer({ method: 'enumerate' }, function(){
	var action = uniformDraw(manifestStateToActions(manifestState));
	var eu = expectedUtility(manifestState, belief, action);
	factor(params.alpha * eu);
	return action;
      });
    });

  var expectedUtility = dp.cache(
    function(manifestState, belief, action) {
      return expectation(
	Infer({ method: 'enumerate' }, function(){
	  var latentState = sample(belief);
	  var state = buildState(manifestState, latentState);
	  var u = utility(state, action);
	  if (state.manifestState.terminateAfterAction) {
	    return u;
	  } else {
	    // change state and get an observation based on *latentState*
	    var nextState = transition(state, action);
	    var nextObservation = observe(nextState);

	    // update agent's beliefs, and have them choose an action
	    var nextBelief = updateBelief(nextState.manifestState, belief,
					  nextObservation);
	    var nextAction = sample(act(nextState.manifestState, nextBelief));

	    // compute utility given the next manifest state, the agent's new
	    // belief, and the agent's new action
	    var futureU = expectedUtility(nextState.manifestState, nextBelief,
					  nextAction);
	    return u + futureU;
	  }
	}));
    });

  return {
    act: act,
    expectedUtility: expectedUtility,
    params: params,
    updateBelief: updateBelief};
};

var simulateBeliefAgent = function (startState, world, agent, actualTotalTime, outputType) {
  // TODO remove actualTotalTime argument

  var totalTime = startState.manifestState.timeLeft;
  assert.ok(isPOMDPState(startState), 'simulateBeliefDelayAgent args');
  assert.ok( _.contains(['states','actions','stateAction','stateBelief'], outputType), 
             "outputType key not in ['states', 'actions', 'stateAction', 'stateBelief']");
  assert.ok(totalTime > 1 || startState.manifestState.terminateAfterAction, 
            'if totalTime==1, must also terminateAfterAction');

  var agentAct = agent.act;
  var agentUpdateBelief = agent.updateBelief;
  var priorBelief = agent.params.priorBelief;
  var transition = world.transition;
  var observe = world.observe;
  
  var selectOutput = function(state, action, belief){
    var table =  {states:state, actions:action, stateAction:[state, action], 
                  stateBelief: [state, belief]};
    return table[outputType];
  };

  var shouldTerminate = function (manifestState) { return manifestState.terminateAfterAction; };

  var sampleSequence = function(state, priorBelief) {
    var observation = observe(state);
    
    var delay = 0;
    var belief = agentUpdateBelief(state.manifestState, priorBelief, observation, delay);
    var action = sample(agentAct(state.manifestState, belief, delay));       
    var output = [selectOutput(state, action, belief)];

    if (shouldTerminate(state.manifestState)) {
      return output;
    } else {   
      var nextState = transition(state, action);
      return output.concat(sampleSequence(nextState, belief));
    }
  };
  return sampleSequence(startState, priorBelief);
};


