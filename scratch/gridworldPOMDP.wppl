// TODO: fix observe function

// Helper functions for testing argument types (warning: heuristics only)
var isGreaterZero = function (x) {return _.isFinite(x) && x > 0;};
var isERP = function (x) {return x.hasOwnProperty('score')
			  && x.hasOwnProperty('sample');};
var isState = function (x) {x.hasOwnProperty('latentState')
			    && _.isFinite(x.manifestState.timeLeft);};
// note: isGridworld is different in this file than how it is in other files
var isGridworld = function(world){return arraysEqual(world.actions,
						     ['l', 'r', 'u', 'd'])
				  && world.hasOwnProperty('feature')
				  && world.hasOwnProperty('xLim')
				  && world.hasOwnProperty('yLim')
				  && world.hasOwnProperty('transition');};
var isWorld = function (x) { return x.hasOwnProperty('transition')
			     && x.hasOwnProperty('manifestStateToActions')
			     && x.hasOwnProperty('observe');};

// Helper function for building state from its components
var buildState = function (manifestState, latentState) {
  return { manifestState:manifestState, latentState:latentState };
};

// function that builds a gridworld POMDP

// arg is a gridworld MDP, which is an object with features (an array of
// arrays of the features at each point), xLim, yLim, feature (a function of
// a (manifest) state that returns the features of that state), transition
// (a transition function on manifest states), actions, and stateToActions.

// manifest states in this POMDP are objects with loc (an array of two
// numbers), timeLeft, dead, and digest - the same as states in gridworld MDPs.
// latent states are an object listing whether each restaurant type is open.
// transition acts the same as in gridworld MDPs, not touching the latent state,
// unless the transition would take the agent into a closed restaurant, in which
// case the agent stays put.
// observe tells the agent which adjacent restaurants are open. If the agent is not
// adjacent to any restaurants, they get 'noObservation'.
var makeGridworldPOMDP = function(gridworld) {
  assert.ok(isGridworld(gridworld), 'makeGridworldPOMDP arg');

  var actions = gridworld.actions;
  var feature = gridworld.feature;
  var manifestStateToActions = function(manifestState) {
    return actions;
  };
  
  var _mdpTransition = gridworld.transition;
  var mdpTransition = function(state, action) {
    // transition the manifest state as it would be transitioned in the gridworld
    // mdp, leave the latent state alone
    var newManifestState = _mdpTransition(state.manifestState, action);
    return buildState(newManifestState, state.latentState);
  };

  var transition = function(state, action) {
    assert.ok(isState(state), 'transition state arg');

    var proposedNewState = mdpTransition(state, action);
    // console.log(JSON.stringify(feature(proposedNewState.manifestState)));
    var newFeatureName = feature(proposedNewState.manifestState).name;
    // if proposedNewState is a restaurant that is closed, stay put, but increment
    // time. otherwise, change to proposed new state.
    if (newFeatureName && !proposedNewState.latentState[newFeatureName]) {
      return buildState(advanceStateTime(state.manifestState), state.latentState);
    } else {
      return proposedNewState;
    }
  };

  // returns an array of restaurants that neighbour a state
  var neighbourRestaurants = function(state) {
    var loc = state.manifestState.loc;
    var updateStateLoc = function(state, newLoc) {
      return buildState(update(state.manifestState, {loc: newLoc}), state.latentState);
    };
    
    var potentialneighbourStates = [
      updateStateLoc(state, [loc[0] - 1, loc[1]]),
      updateStateLoc(state, [loc[0] + 1, loc[1]]),
      updateStateLoc(state, [loc[0], loc[1] + 1]),
      updateStateLoc(state, [loc[0], loc[1] - 1]),
    ];

    var neighbourStates = filter(function(state){
      return inGrid_(gridworld, state.manifestState.loc);
    }, potentialneighbourStates);

    var isRestaurant = function(state) {
      return feature(state.manifestState).name;
    };

    return filter(isRestaurant, neighbourStates);
  };

  // returns a subobject of latentState that gives the status of adjacent restaurants
  var observe = function(state) {
    var neighbourRests = neighbourRestaurants(state);
    if (_.isEmpty(neighbourRests)) {
      return 'noObservation';
    } else {
      var restaurantNames = map(function(state){
	return feature(state.manifestState).name;}, neighbourRests);
      return map(function(name){return [name, state.latentState[name]];},
		 restaurantNames);
    }
  };
  
  return {manifestStateToActions: manifestStateToActions,
	  transition: transition,
	  observe: observe};
};

// POMDP AGENT WITHOUT DELAYS
// basically the same as makeBeliefDelayAgent without delays or discounting

var makeBeliefAgent = function(agentParams, world) {
  map(function(s){assert.ok(agentParams.hasOwnProperty(s),'makeBeliefAgent args');}, 
      ['utility','alpha', 'priorBelief']);
  assert.ok( isWorld(world),
	     'world argument lacks transition, stateToActions, or observe');

  var utility = agentParams.utility;

  var manifestStateToActions = world.manifestStateToActions;
  var transition = world.transition;
  var observe = world.observe;

  var updateBelief = dp.cache(
    function(manifestState, currentBelief, observation){
      return Enumerate(function(){
	var latentState = sample(currentBelief);
	var state = buildState(manifestState, latentState);
	condition(_.isEqual(observe(state), observation));
	return latentState;
      });
    });

  var agent = dp.cache(
    function(manifestState, currentBelief, observation) {
      assert.ok(_.isFinite(manifestState.timeLeft) && isERP(currentBelief),
		'agent args fail');

      // console.log(JSON.stringify(observation));
      var newBelief = updateBelief(manifestState, currentBelief, observation);

      return Enumerate(function(){
	var action = uniformDraw(manifestStateToActions(manifestState));
	var eu = expectedUtility(manifestState, newBelief, action);
	factor(agentParams.alpha * eu);
	return {action: action, belief: newBelief};
      });
    });

  var expectedUtility = dp.cache(
    function(manifestState, currentBelief, action) {
      return expectation(
	Enumerate(function(){
	  var latentState = sample(currentBelief);
	  var state = buildState(manifestState, latentState);
	  var u = utility(state, action);
	  if (state.manifestState.dead) {
	    return u;
	  } else {
	    var nextState = transition(state, action);
	    var nextAction = sample(agent(nextState.manifestState,
					  currentBelief,
					  observe(nextState)));
	    var futureU = expectedUtility(nextState.manifestState,
					  nextAction.belief,
					  nextAction.action);
	    return u + futureU;
	  }
	})
      );
    });

  return {agent: agent, expectedUtility: expectedUtility, agentParams: agentParams};
};

// *simulateBeliefDelayAgent* doesn't actually refer to the delays, so I can copy and
// paste it here
var simulateBeliefAgent = function (startState, world, agent, actualTotalTime,
				    outputStatesOrActions) {
  var perceivedTotalTime = startState.manifestState.timeLeft;
  assert.ok( actualTotalTime <= perceivedTotalTime && isState(startState),
	     'simulate args');
  assert.ok( perceivedTotalTime  > 1, 'perceivedTime<=1. If=1 then should have state.dead, but then simulate wont work');

  var agentAction = agent.agent;
  var priorBelief = agent.agentParams.priorBelief;
  var transition = world.transition;
  var observe = world.observe;

  // var cutoffCondition = isGridworld(world) ? function (actualTimeLeft, state) {
  //   return actualTimeLeft == 0 || state.dead;
  // } :	function (actualTimeLeft, state) {return actualTimeLeft == 0;};


  var sampleSequence = function(state, currentBelief, actualTimeLeft) {
    if (actualTimeLeft == 0 || state.manifestState.dead) {
      return [];
    } else {
      var nextAction = sample(agentAction(state.manifestState, currentBelief,
					  observe(state)));
      
      var nextState = transition(state, nextAction.action);
      var out = {states:state, actions:nextAction, both:[state, nextAction],
                 stateBelief: [state, currentBelief]}[outputStatesOrActions];
      // could return observations
      
      return [out].concat( sampleSequence(nextState, nextAction.belief,
					  actualTimeLeft - 1));
    }
  };
  return sampleSequence(startState, priorBelief, actualTotalTime);
};

var printOut = function ( trajectory ) {
  console.log('trajectory', map( function (state) {return state.manifestState.loc;},
  				 trajectory) );
  //console.log('expUtilities', out.startEU);
  // console.log('trajectory', map(function(state) {return state.manifestState;},
  // 				trajectory));
};


var myDonutWorld = makeDonutWorldExtended({bottomLeftNook: '#'});
var donutFeature = myDonutWorld.feature;
var myDonutPOMDP = makeGridworldPOMDP(myDonutWorld);

var utility = function(state, action) {
  var name = donutFeature(state.manifestState).name;
  if (name === 'Donut') {
    return 2;
  } else if (name === 'Noodle') {
    return 10;
  } else if (name === 'Veg') {
    return 5;
  } else {
    return -0.01;
  }
};

var priorBelief = Enumerate(function(){
  if (flip(0.5)) {
    return {Donut: true,
	    Veg: true,
	    Noodle: true};
  } else {
    return {Donut: true,
	    Veg: true,
	    Noodle: false};
  }
});

var myDonutAgent = makeBeliefAgent({utility: utility,
				    alpha: 500,
				    priorBelief: priorBelief
				   },
				   myDonutPOMDP);

var myStart = {manifestState: {loc: [2,1],
			       dead: false,
			       timeLeft: 10,
			       digest: 1},
	       latentState: {Donut: true,
			     Veg: true,
			     // Noodle: true
			     Noodle: false}};

var informedPrior = Enumerate(function(){
  return myStart.latentState;
});

var myInformedAgent = makeBeliefAgent({utility: utility,
				       alpha: 500,
				       priorBelief: informedPrior},
				      myDonutPOMDP);

// var trajectory = simulateBeliefAgent(myStart, myDonutPOMDP, myDonutAgent, 10, 'states');
var trajectory = simulateBeliefAgent(myStart, myDonutPOMDP, myInformedAgent, 10, 'states');
printOut(trajectory);
