// this is designed to show that an agent with bounded VOI can behave
// differently depending on whether *makeBeliefDelayAgent* uses the trueLatent
// thing or not

// designed so that the utility of going to noodle should barely be higher than
// the utility of going to donut

var makeForkRoad = function(options) { 
  var _ = ' '; 
  var D = {name: 'Donut'};
  var N = {name: 'Noodle'};

  var myOptions = options || {};

  var features =
	[[ N , '#'],
	 [ _ , '#'],
	 [ _ ,  D ]];
  
  return makeGridWorldMDP(features, myOptions);
};

var forkyGridworldMDP = makeForkRoad();
var forkyGridworldPOMDP = makeGridWorldPOMDP(forkyGridworldMDP);
var forkFeature = forkyGridworldMDP.feature;

var tableToUtilityFunctionFork = function(table) {
  return function(state, action) {
    if (state.manifestState.dead) {
      return 0;
    }
    var stateFeatureName = forkFeature(state.manifestState).name;
    if (stateFeatureName) {
      return table[stateFeatureName];
    } else {
      return table.timeCost;
    }
  };
};

var startState = {manifestState: {loc: [0,0],
				  dead: false,
				  timeLeft: 5,
				  digest: 0},
		  latentState: {Donut: true,
				Noodle: true}};
var utilityTable = {Noodle: 11,
		    Donut: 1,
		    timeCost: -0.1};
var prior = Infer({ method: 'enumerate' }, function(){
  return categorical([0.1, 0.9], [startState.latentState, {Donut: true, Noodle: false}]);
});

var params = {alpha: 1000,
	      noDelays: false,
	      discount: 0,
	      sophisticatedOrNaive: 'naive',
	      myopia: {on: false, bound: 0},
	      priorBelief: prior,
	      boundVOI: {on: true, bound: 0},
	      utility: tableToUtilityFunctionFork(utilityTable)};

var agent = makeBeliefDelayAgent(params, forkyGridworldPOMDP);
var gridLocs = trajectoryToLocations(simulateBeliefDelayAgent(startState, forkyGridworldPOMDP,
							      agent, 'states'));
console.log(gridLocs);
