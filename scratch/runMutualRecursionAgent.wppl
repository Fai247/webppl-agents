console.log('Simulating mutual recursion agent in home-club game');

var homeClubGame = makeHomeClubGame();

var optionsHomeClub0 = {
  game: homeClubGame,
  playerNumber: 0,
  level: 3,
  alpha: 100,
  utility: homeClubUtility0,
  oppUtility: homeClubUtility1
};
var agentHomeClub0 = mutualRecursionAgent(optionsHomeClub0);

var optionsHomeClub1 = update(optionsHomeClub0, {
  playerNumber: 1,
  utility: homeClubUtility1,
  oppUtility: homeClubUtility0
});
var agentHomeClub1 = mutualRecursionAgent(optionsHomeClub1);

var startState = {loc: 'start',
		  terminateAfterAction: false};

var homeClubTrajectory = simulateGame(startState, homeClubGame, agentHomeClub0,
				      agentHomeClub1, 'stateActions');

console.log(homeClubTrajectory);

// for alpha = 100, agent reliably goes home even at level 1
// for alpha = 1, at level 1, agent goes home with probability 0.622.
// at level 2, agent goes home with probability 0.980


console.log('\nSimulating mutual recursion agent in double-club game');

var doubleClubGame = makeDoubleClubGame();

var optionsDoubleClub0 = {
  game: doubleClubGame,
  playerNumber: 0,
  level: 3,
  alpha: 100,
  utility: doubleClubUtility0,
  oppUtility: doubleClubUtility1
};
var agentDoubleClub0 = mutualRecursionAgent(optionsDoubleClub0);

var optionsDoubleClub1 = update(optionsDoubleClub0, {
  playerNumber: 1,
  utility: doubleClubUtility1,
  oppUtility: doubleClubUtility0
});
var agentDoubleClub1 = mutualRecursionAgent(optionsDoubleClub1);

var doubleClubTrajectory = simulateGame(startState, doubleClubGame, agentDoubleClub0,
					agentDoubleClub1, 'stateActions');

console.log(doubleClubTrajectory);

// at alpha = 100, a level 1 agent only goes to cube with probability 0.525
// a level 2 agent also goes to cube with probability 0.525
// a level 3 agent goes with probability 1. This is strange.

console.log('\nSimulating mutual recursion agent in Matching Pennies');

var matchingPenniesGame = makeMatchingPenniesGame();

var optionsMatchingPennies0 = {
  game: matchingPenniesGame,
  playerNumber: 0,
  level: 3,
  alpha: 100,
  utility: matchingPenniesUtility0,
  oppUtility: matchingPenniesUtility1
};
var agentMatchingPennies0 = mutualRecursionAgent(optionsMatchingPennies0);

var optionsMatchingPennies1 = update(optionsMatchingPennies0, {
  playerNumber: 1,
  utility: matchingPenniesUtility1,
  oppUtility: matchingPenniesUtility0
});
var agentMatchingPennies1 = mutualRecursionAgent(optionsMatchingPennies1);

var matchingPenniesTrajectory = simulateGame(startState, matchingPenniesGame,
					     agentMatchingPennies0,
					     agentMatchingPennies1,
					     'stateActions');

console.log(matchingPenniesTrajectory);

console.log('\nSimulating mutual recursion agent in Bach or Stravinsky');

var BoSGame = makeBoSGame();

var optionsBoS0 = {
  game: BoSGame,
  playerNumber: 0,
  level: 3,
  alpha: 100,
  utility: BoSUtility0,
  oppUtility: BoSUtility1
};
var agentBoS0 = mutualRecursionAgent(optionsBoS0);

var optionsBoS1 = update(optionsBoS0, {
  playerNumber: 1,
  utility: BoSUtility1,
  oppUtility: BoSUtility0
});
var agentBoS1 = mutualRecursionAgent(optionsBoS1);

var BoSTrajectory = simulateGame(startState, BoSGame, agentBoS0, agentBoS1,
					     'stateActions');

console.log(BoSTrajectory);
