// here, we observe the agent in a gridworld, going past a nearby donut shop
// and towards a further away donut shop. we can conclude that the agent likes
// donuts, but thinks that the nearby donut shop is closed.

// assume that the agent is not a discounter, does not have bounded VOI, etc

var gridworldMDP = makeDonutWorld2({big: true});
var gridworldPOMDP = makeGridworldPOMDP(gridworldMDP);
var feature = gridworldMDP.feature;
var transition = gridworldPOMDP.transition;
var observe = gridworldPOMDP.observe;

// here, we define tables listing the utility of each restaurant, and a function
// that converts these tables into utility functions.

var donutUtilityTable = {'Donut N': 5,
			 'Donut S': 5,
			 'Veg': 1,
			 'Noodle': 1,
			 timeCost: -0.1};
 
var vegUtilityTable = {'Donut N': 1,
		       'Donut S': 1,
		       Veg: 3,
		       Noodle: 1,
		       timeCost: -0.1};

var tableToUtilityFunction = function(table) {
  return function(state, action) {
    if (state.manifestState.dead) {
      return 0;
    }
    var stateFeatureName = feature(state.manifestState).name;
    if (stateFeatureName) {
      return table[stateFeatureName];
    } else {
      return table.timeCost;
    }
  };
};

// here, we define the agent's actual prior, as well as an informed prior that
// knows the true latent state.

var uninformedPrior = Enumerate(function(){
  if (flip(0.8)) {
    return {'Donut N': true,
	    'Donut S': false,
	    'Veg': true,
	    'Noodle': true};
  } else {
    return {'Donut N': true,
	    'Donut S': true,
	    'Veg': true,
	    'Noodle': true};
  }
});

var informedPrior = deltaERP({'Donut N': true,
			      'Donut S': true,
			      'Veg': true,
			      'Noodle': true});

// we start the agent off near Donut South
var startState = {manifestState: {loc: [2,1],
				  dead: false,
				  timeLeft: 10,
				  digest: 1},
		  latentState: {'Donut N': true,
				'Donut S': true,
				'Veg': true,
				'Noodle': true}};

// making the agent
var params = {
  alpha: 100,
  noDelays: true,
  discount: 0,
  sophisticatedOrNaive: 'sophisticated',
  myopia: {on: false, bound: 0},
  priorBelief: uninformedPrior,
  boundVOI: {on: false, bound: 0},
  utility: tableToUtilityFunction(donutUtilityTable)
};
var agent = makeBeliefDelayAgent(params, gridworldPOMDP);

// generating the agent's trajectory
var observedTrajectory = simulateBeliefDelayAgent(startState, gridworldPOMDP,
						  agent, 10, 'stateAction');

// helper function for inference
var factorAlongTrajectory = function(index, trajectory, agent, belief){
  if (index >= trajectory.length) {
    return [];
  } else {

    var agentAct = agent.act;
    var agentUpdateBelief = agent.updateBelief;
    
    var state = trajectory[index][0];
    var observedAction = trajectory[index][1];

    var observation = observe(state);
    var nextBelief = agentUpdateBelief(state.manifestState, belief, observation, 0);
    var nextActionERP = agentAct(state.manifestState, nextBelief, 0);
    
    factor(nextActionERP.score([], observedAction));
    
    return factorAlongTrajectory(index + 1, trajectory, agent, nextBelief);
  }
};

// the inference itself
var agentPosterior = function() {
  return printERP(Enumerate(function(){
    var alpha = 100;
    
    var utilityTable = uniformDraw([donutUtilityTable, vegUtilityTable]);
    var utility = tableToUtilityFunction(utilityTable);
    var agentPrior = uniformDraw([uninformedPrior, informedPrior]);

    var isMyopic = false;
    var myopiaBound = 0;

    var hasBoundVOI =  false;
    var voiBound = 0;

    var discount = 0;
    var noDelays = true;

    var sophisticatedOrNaive = 'sophisticated';

    var params = {
      alpha: alpha,
      utility: utility,
      noDelays: noDelays,
      discount: discount,
      sophisticatedOrNaive: sophisticatedOrNaive,
      myopia: {on: isMyopic, bound: myopiaBound},
      priorBelief: agentPrior,
      boundVOI: {on: hasBoundVOI, bound: voiBound}
    };
    
    var agent = makeBeliefDelayAgent(params, gridworldPOMDP);

    factorAlongTrajectory(0, observedTrajectory, agent, agentPrior);

    return update( _.omit(params, utility), {utilityTable: utilityTable});
  }));
};

timeit(agentPosterior);
