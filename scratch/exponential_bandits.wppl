// exponential_discount_vs_optimal_bandits

///fold:
var baseParams = {
  alpha: 1000,
  myopia: {on: false, bound: 0},
  boundVOI: {on: false, bound: 0},
  noDelays: false,
  discount: 0,
  sophisticatedOrNaive: 'naive'
};

var armToPlace = function(arm){
  return {0: "Tahoe",
          1: "Chile",
          2: "Switzerland"}[arm];
};

var utilityTable = {0:0, 0.5:0.5, 1:1, 1.5:1.5, 5:5};

var display = function(trajectory){
  return map( armToPlace, most(trajectory) );
};
///

// Arms are skiing destinations:
// 0: "Tahoe", 1: "Chile", 2: "Switzerland"

// Actual utility for each destination
var armToPrize = {
  0: "1",
  1: "0",
  2: "0.5"
};

// Constuct Bandit world
var numberTrials = 10;
var worldAndStart = makeIRLBanditWorldAndStart(3, armToPrize, numberTrials);
var world = worldAndStart.world;
var start = worldAndStart.startState;

// Agent prior for utility of each destination
var priorBelief = Enumerate(function(){
  var latentState = {
    0: "1", // Tahoe has known utility 1
    1: categorical([0.9, 0.1], ["0", "5"]), // Chile has high variance
    2: uniformDraw(["0.5", "1.5"]) // Switzerland has high expected value
  };
  return buildState(start.manifestState, latentState);
});

var discountFunction = function(delay) {
  return Math.pow(0.5, delay);
};

var exponentialParams = update(baseParams, {discountFunction: discountFunction,
                                           priorBelief: priorBelief});
var exponentialAgent = makeIRLBanditAgent(utilityTable, exponentialParams, worldAndStart,
                                          'beliefDelay');
var exponentialTrajectory = simulateBeliefDelayAgent(start, world, exponentialAgent,
						     'actions');

var optimalParams = update(baseParams, {priorBelief: priorBelief});
var optimalAgent = makeIRLBanditAgent(utilityTable, optimalParams, worldAndStart,
				      'belief');
var optimalTrajectory = simulateBeliefAgent(start, world, optimalAgent, 'actions');


console.log('exponential discounting trajectory: ' + display(exponentialTrajectory));
console.log('optimal trajectory: ' + display(optimalTrajectory));
