



var makeHyperbolicAgent = function (params, world) {
  var stateToActions = world.stateToActions;
  var transition = world.transition;
  var utility = params.utility;

  var discountFunction = function(delay){
    return 1/(1 + params.discount*delay);
  };

  var isNaive = params.sophisticatedOrNaive=='naive';
    
  var act = dp.cache( 
    function(state, delay){
      return Enumerate(function(){
        var action = uniformDraw(stateToActions(state));
        var eu = expectedUtility(state, action, delay);    
        factor(params.alpha * eu);
        return action;
      });      
    });
  
  var expectedUtility = dp.cache(
    function(state, action, delay){
      var u = discountFunction(delay) * utility(state, action);
      if (state.terminateAfterAction){
        return u; 
      } else {                     
        return u + expectation( Enumerate(function(){
          var nextState = transition(state, action); 
          var perceivedDelay = isNaive ? delay + 1 : 0;
          var nextAction = sample(act(nextState, perceivedDelay));
          return expectedUtility(nextState, nextAction, delay+1);  
        }));
      }                      
    });
  
  return {
    params : params,
    expectedUtility : expectedUtility,
    act: act
  };
};

var simulateHyperbolic = function(startState, world, agent) {
  var act = agent.act;
  var expectedUtility = agent.expectedUtility;
  var transition = world.transition;

  var sampleSequence = function (state) {
    var delay = 0;
    var action = sample(act(state, delay));
    var nextState = transition(state, action); 
    var out = [state,action];
    return state.terminateAfterAction ?
      [out] : [out].concat(sampleSequence(nextState));
  };
  return sampleSequence(startState);
};


var makeRestaurantUtilityFunction = function (world, rewards) { 
  return function(state, action) {
    var getFeature = world.feature;
    var feature = getFeature(state);

    if (feature.name) { return rewards[feature.name][state.timeAtRestaurant]; }
    return -.05;
  };
};

var getHyperbolicParams = function(utilityTable, discounting, alpha, world){
  return {
    alpha: alpha,
    discount: discounting.discount,
    sophisticatedOrNaive : discounting.sophisticatedOrNaive,
    utility: makeRestaurantUtilityFunction(world,utilityTable)
  };
};

var nameToPath = restaurantNameToPath;
var pathToName = restaurantPathToName;

var getLocations = function(stateActions){
  return _.map( _.map(stateActions,0), 'loc');
};


// Construct MDP, i.e. world
var getWorldStart = function(){
  return { start: { loc : [3,1],
                    terminateAfterAction : false,
                    timeLeft : 11
                  },
           world: makeDonutWorld2({ big : true, maxTimeAtRestaurant : 2})
         };
};

// Construct hyperbolic discounting agent
var priorUtilityTable = function(){
  var donut = [uniformDraw([0,5,10,20]), 0];
  var veg = [ 0, uniformDraw([0,20,30])];
  return {'Donut N' : donut,
          'Donut S' : donut,
          'Veg'   : veg,
          'Noodle': [0, 0]
         };
};

var priorDiscounting = function(){
  var discount = uniformDraw([0, 1, 1.5]);
  var sophisticatedOrNaive = uniformDraw(['sophisticated', 'naive']);
  return {discount: discount, sophisticatedOrNaive: sophisticatedOrNaive};
};



var infer = function(observedPath, world, startState){
  return Enumerate( function(){
    var utilityTable = priorUtilityTable();
    var discounting = priorDiscounting();
    
    var agent = makeHyperbolicAgent( getHyperbolicParams(utilityTable, discounting, 500, world), world);
    var trajectory = Rejection( function(){return simulateHyperbolic(startState, world, agent);},1).MAP().val; 
    var path = getLocations(trajectory).slice(0,trajectory.length-1 );

    condition( _.isEqual(observedPath, path) );
    return {utility:utilityTable, discounting: discounting};
  });
};

// Start
var startState = getWorldStart().start;
var world = getWorldStart().world;

// CONDITION ON NAIVE PATH
console.log('Observe naive');
var erp = infer( nameToPath.naive, world, startState );
printERP(erp);
console.log('\n\n MAP: ', erp.MAP());

// CONDITION ON SOPHISTICATED PATH
console.log('\Observe sophisticated');
var erp = infer( nameToPath.sophisticated, world, startState );
printERP(erp);
console.log('\n\n MAP: ', erp.MAP());

ash();


var testAgent = function(){
  var worldStart = { start: { loc : [3,1],
                              terminateAfterAction : false,
                              timeLeft : 12
                            },
                     world: makeDonutWorld2({ big : true, maxTimeAtRestaurant : 2})
                   };
  var donut = [10,0];
  var veg = [5,25];
  var utilityTable = {'Donut N' : donut,
                      'Donut S' : donut,
                      'Veg'   : veg,
                      'Noodle': [0, 0]
                     };
  var discounting = {discount:1, sophisticatedOrNaive:'sophisticated'};
  var alpha = 500;
  var world = worldStart.world;
  var params = getHyperbolicParams(utilityTable, discounting, alpha, world);
  var agent = makeHyperbolicAgent(params,world);
  var fullPath = getLocations( simulateHyperbolic(worldStart.start, world, agent) );
  return fullPath;
};

console.log('testAgent', testAgent());









// TODO merge with simulate, use a more descriptive name. It seems that
// ideally we'd use the MAP path, and the 
var MAPActionPath = function(state, world, agent, actualTotalTime, statesOrActions) { 
  var perceivedTotalTime = state.timeLeft;
  assert.ok( perceivedTotalTime  > 1, 'perceivedTime<=1. If=1 then should have state.terminateAfterAction, but then simulate wont work' + JSON.stringify(state));

  var agentAction = agent.agent;
  var expectedUtility = agent.expectedUtility;
  var transition = world.transition;

  var sampleSequence = function (state, actualTimeLeft) {
      var action = agentAction(state, actualTotalTime-actualTimeLeft).MAP().val;
      var nextState = transition(state, action); 
      var out = {states:state, actions:action, both:[state,action]}[statesOrActions];
    if (actualTimeLeft==0 || state.terminateAfterAction){
      return [out];
    } else {
      return [ out ].concat( sampleSequence(nextState, actualTimeLeft-1));
    }
  };
  return sampleSequence(state, actualTotalTime);
};

var getExpectedUtilities = function(trajectory, agent, actions) { 
  var expectedUtility = agent.expectedUtility;

  var v = mapIndexed(function(i, state) {
    return [state.loc, map(function (a) { return  expectedUtility(state, a, i); }, actions)];
  }, trajectory)
  return v;
};

// TODO more descriptive name
var mdpSim = function(start, world, agent, actualTotalTime) { 
  var trajectory = simulateHyperbolic(start, world, agent, actualTotalTime, 'states');

  var trajectoryPlans = map(function (state) {
    var currentPlan = MAPActionPath(state, world, agent, state.timeLeft, 'states');
    return getExpectedUtilities(currentPlan, agent, world.actions);
  }, trajectory);

  GridWorld.draw(world, {trajectory : trajectory, paths : trajectoryPlans });
}
null
